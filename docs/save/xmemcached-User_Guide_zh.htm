<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html><head>
 


 
 
 


 <link rel="icon" type="image/vnd.microsoft.icon" 
href="http://www.gstatic.com/codesite/ph/images/phosting.ico">
 
 <script type="text/javascript">
 
 
 
 var codesite_token = "68c759799b4e016736549b2ba2822783";
 
 
 var logged_in_user_email = "young.jiandong@gmail.com";
 
 
 var relative_base_url = "";
 
 </script>
 
 
 <title>User_Guide_zh - 
 xmemcached -
 
 用户指南 0.3版本 - Project Hosting on Google Code</title>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
 
 <link type="text/css" rel="stylesheet" 
href="xmemcached-User_Guide_zh_files/ph_core.css">
 
 <link type="text/css" rel="stylesheet" 
href="xmemcached-User_Guide_zh_files/ph_detail.css">
 
 
 
 <link type="application/atom+xml" rel="alternate" 
href="http://code.google.com/feeds/p/xmemcached/svnchanges/basic?path=/wiki/User_Guide_zh.wiki">
 
 
<!--[if IE]>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/1274223301709965370/css/d_ie.css" >
<![endif]-->
 <style type="text/css">
 .menuIcon.off { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -42px }
 .menuIcon.on { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -28px }
 .menuIcon.down { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 0; }
 </style>
<script src="xmemcached-User_Guide_zh_files/ga.js" async="" type="text/javascript"></script></head><body
 class="t6">
 <script type="text/javascript">
 var _gaq = _gaq || [];
 _gaq.push(
 ['siteTracker._setAccount', 'UA-18071-1'],
 ['siteTracker._trackPageview']);
 
 (function() {
 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
 (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
 })();
 </script>
 <div id="gaia">
 
 <span>
 
 
 <b>young.jiandong@gmail.com</b>
 
 
 | <a href="http://code.google.com/u/young.jiandong/" 
id="projects-dropdown" onclick="return false;"><u>My favorites</u> <small>▼</small></a>
 | <a href="http://code.google.com/u/young.jiandong/" 
onclick="_CS_click('/gb/ph/profile');" title="Profile, Updates, and 
Settings"><u>Profile</u></a>
 | <a 
href="https://www.google.com/accounts/Logout?continue=http%3A%2F%2Fcode.google.com%2Fp%2Fxmemcached%2Fwiki%2FUser_Guide_zh"
 onclick="_CS_click('/gb/ph/signout');"><u>Sign out</u></a>
 
 </span>

 </div>
 <div class="gbh" style="left: 0pt;"></div>
 <div class="gbh" style="right: 0pt;"></div>
 
 
 <div style="height: 1px;"></div>
<!--[if IE 6]>
<div style="text-align:center;">
Support browsers that contribute to open source, try <a href="http://www.firefox.com">Firefox</a> or <a href="http://www.google.com/chrome">Google Chrome</a>.
</div>
<![endif]-->



 <table style="padding: 0px; margin: 20px 0px 0px; width: 100%;" 
cellpadding="0" cellspacing="0">
 <tbody><tr style="height: 58px;">
 
 <td style="width: 55px; text-align: center;">
 <a href="http://code.google.com/p/xmemcached/">
 
 
 <img src="xmemcached-User_Guide_zh_files/logo" alt="Logo">
 
 </a>
 </td>
 
 <td style="padding-left: 0.5em;">
 
 <div id="pname" style="margin: 0px 0px -3px;">
 <a href="http://code.google.com/p/xmemcached/" style="text-decoration: 
none; color: rgb(0, 0, 0);">xmemcached</a>
 
 </div>
 <div id="psum">
 <i><a id="project_summary_link" 
href="http://code.google.com/p/xmemcached/" style="text-decoration: 
none; color: rgb(0, 0, 0);">Extreme performance modern memcached client 
for java</a></i>
 </div>
 
 </td>
 <td style="white-space: nowrap; text-align: right;">
 
 <form action="/hosting/search">
 <input size="30" name="q">
 <input name="projectsearch" value="Search projects" type="submit">
 </form>
 
 </td></tr>
 </tbody></table>


 
<table id="mt" border="0" cellpadding="0" cellspacing="0" width="100%">
 <tbody><tr>
 <th onclick="if (!cancelBubble) _go('/p/xmemcached/');">
 <div class="tab inactive">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <a onclick="cancelBubble=true;" 
href="http://code.google.com/p/xmemcached/">Project&nbsp;Home</a>
 </div>
 </div>
 </th><td>&nbsp;&nbsp;</td>
 
 
 
 
 <th onclick="if (!cancelBubble) _go('/p/xmemcached/downloads/list');">
 <div class="tab inactive">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <a onclick="cancelBubble=true;" 
href="http://code.google.com/p/xmemcached/downloads/list">Downloads</a>
 </div>
 </div>
 </th><td>&nbsp;&nbsp;</td>
 
 
 
 
 
 <th onclick="if (!cancelBubble) _go('/p/xmemcached/w/list');">
 <div class="tab active">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <a onclick="cancelBubble=true;" 
href="http://code.google.com/p/xmemcached/w/list">Wiki</a>
 </div>
 </div>
 </th><td>&nbsp;&nbsp;</td>
 
 
 
 
 
 <th onclick="if (!cancelBubble) _go('/p/xmemcached/issues/list');">
 <div class="tab inactive">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <a onclick="cancelBubble=true;" 
href="http://code.google.com/p/xmemcached/issues/list">Issues</a>
 </div>
 </div>
 </th><td>&nbsp;&nbsp;</td>
 
 
 
 
 
 <th onclick="if (!cancelBubble) _go('/p/xmemcached/source/checkout');">
 <div class="tab inactive">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <a onclick="cancelBubble=true;" 
href="http://code.google.com/p/xmemcached/source/checkout">Source</a>
 </div>
 </div>
 </th><td>&nbsp;&nbsp;</td>
 
 
 <td width="100%">&nbsp;</td>
 </tr>
</tbody></table>
<table class="st" align="center" border="0" cellpadding="0" 
cellspacing="0" width="100%">
 <tbody><tr>
 
 
 
 <td>
 <div class="issueDetail">
<div class="isf">
 
 <span class="inIssueList"> 
 <span>Search</span>
 <form action="/p/xmemcached/w/list" method="GET" style="display: 
inline;">
 <select id="can" name="can" style="font-size: 92%;">
 <option disabled="disabled">Search within:</option>
 
 <option value="1">&nbsp;All wiki pages</option>
 <option value="3">&nbsp;Featured pages</option>
 <option value="2" selected="selected">&nbsp;Current pages</option>
 
 
 <option value="5" {is="" can="" 5="" }selected="selected" {end}="">&nbsp;My
 starred pages</option>
 
 <option value="4">&nbsp;Deprecated pages</option>
 
 </select>
 <span>for</span>
 <span id="qq"><input size="38" id="q" name="q" style="font-size: 92%;" 
type="text"></span>
 
 
 <input value="Search" style="font-size: 92%;" type="submit">
 </form>
 </span>

 
 
 
 
 
 
 

</div>
</div>

 </td>
 
 
 
 
 
 
 <td class="bevel-right" align="right" height="4" valign="top">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 </td>
 </tr>
</tbody></table>
<script type="text/javascript">
 var cancelBubble = false;
 function _go(url) { document.location = url; }
</script>


<div id="maincol" style="padding: 0pt 3px 3px 0pt; margin: 0pt;">

 
<!-- IE -->






 
<style type="text/css">
 #wikimaincol { padding-top: 6px; padding-left:1em}
 #sidebarcontainer { padding: 4px 2px 2px 2px; width:20em; overflow:hidden}
 .sidebartop ul { margin:0 0 0 .5em; padding-left:0 !important; list-style:none}
 .sidebartop ul ul { margin-left:1em; padding-left:0; list-style:none; display:none}
 .sidebartop li { margin:0 0 2px 0; padding:1px; padding-left:14px; cursor:pointer}
 .sidebartop li a { padding:2px}
 .sidebartop li { background: url(http://www.gstatic.com/codesite/ph/images/plus.gif) no-repeat 1px 3px}
 .sidebartop li.treeopen { background: url(http://www.gstatic.com/codesite/ph/images/minus.gif) no-repeat 1px 3px}
 .sidebartop li.treeleaf { background:none}
 .currentpagelink { background:#cdf}
 .sidebartop ul.treeleafcontainer { display:block;}
</style>



 <style type="text/css">
 .artifactcomment {
 margin: .5em 0 0 0;
 padding: .3em 0 .3em .3em;
 border-top: 3px solid #c3d9ff;
 }
 #commentlist {
 border-bottom: 3px solid #c3d9ff;
 }
 #commentform { padding-top: 1em; }
 .delcom { background: #e8e8e8 }
 .commentcontent { margin: 1em 0;}
 </style>


 <div id="wikicontent">
 <table border="0" cellpadding="0" cellspacing="0" width="100%">
 <tbody><tr>
 
 <td class="vt expand" id="wikisidebar">
 <div class="pmeta_bubble_bg">
 
 <div style="float: right; padding: 0pt 3px;">
 <a class="ifExpand" style="font-size: 130%; color: blue; 
text-decoration: none;" href="#" onclick="_DW_toggleSidebar('', 
'xmemcached', this, '68c759799b4e016736549b2ba2822783'); return false;" 
title="Hide sidebar"><b>‹‹</b></a>
 </div>
 <div class="ifCollapse" style="padding: 0pt 2px;">
 <a style="font-size: 130%; color: blue; text-decoration: none;" 
href="#" onclick="_DW_toggleSidebar('', 'xmemcached', this, 
'68c759799b4e016736549b2ba2822783'); return false;" title="Show sidebar"><b>››</b></a>
 </div>
 
 
 <div id="sidebarcontainer" class="sidebartop ifExpand">
 <ul class="treeleafcontainer"><li class="treeleaf"><a 
href="http://code.google.com/p/xmemcached/wiki/Features">Features</a> </li><li
 class="treeleaf"><a href="http://code.google.com/p/xmemcached/wiki/FAQ">FAQ</a>
 </li><li class="treeleaf"><a 
href="http://code.google.com/p/xmemcached/wiki/Getting_Started">Getting_Started</a>
 </li><li class="treeleaf"><a 
href="http://code.google.com/p/xmemcached/wiki/Getting_Started_zh">Getting_Started_zh</a>
 </li><li class="treeleaf"><a 
href="http://code.google.com/p/xmemcached/wiki/User_Guide">User_Guide</a>
 </li><li class="treeleaf"><a class="currentpagelink" 
href="http://code.google.com/p/xmemcached/wiki/User_Guide_zh">User_Guide_zh</a>
 </li><li class="treeleaf"><a 
href="http://code.google.com/p/xmemcached/wiki/memcached_distributed">memcached_distributed</a>
 </li><li class="treeleaf"><a 
href="http://code.google.com/p/xmemcached/wiki/Spring_Integration">Spring_Integration</a>
 </li><li class="treeleaf"><a 
href="http://code.google.com/p/xmemcached/wiki/Hibernate_memcached_integration">Hibernate_memcached_integration</a>
 </li><li class="treeleaf"><a 
href="http://code.google.com/p/xmemcached/wiki/JMX_Support">JMX_Support</a>
 </li><li class="treeleaf"><a 
href="http://code.google.com/p/xmemcached/wiki/Statistics">Statistics</a>
 </li><li class="treeleaf"><a 
href="http://code.google.com/p/xmemcached/wiki/PerformanceTurnning">PerformanceTurnning</a>
 </li><li class="treeleaf"><a 
href="http://code.google.com/p/xmemcached/wiki/User_List">User_List</a> </li><li
 class="treeleaf"><a 
href="http://code.google.com/p/xmemcached/wiki/RoadMap">RoadMap</a> </li></ul>
 </div>
 <div class="round1"></div>
 <div class="round2"></div>
 <div class="round4"></div>
 </div>
</td>

 
 <td class="vt" id="wikimaincol" width="100%">
 
 <div style="float: right; width: 18em;" id="wikimeta">
 <div class="pmeta_bubble_bg">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <table style="padding: 5px;">
 <tbody><tr><td colspan="2" style="padding-bottom: 5px;">Updated <span 
title="Wed Jun 23 01:45:32 2010">Jun 23, 2010</span>
 
 by <a style="white-space: nowrap;" 
href="http://code.google.com/u/killme2008/">killme2008</a>
 </td></tr>
 
 <tr><th class="vt">Labels:</th>
 <td>
 
 <a 
href="http://code.google.com/p/xmemcached/w/list?q=label:Phase-Support" 
title="Plans for user support and advocacy">Phase-Support</a>, 
 
 <a href="http://code.google.com/p/xmemcached/w/list?q=label:UserGuide" 
title="">UserGuide</a>, 
 
 <a 
href="http://code.google.com/p/xmemcached/w/list?q=label:%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97"
 title="">用户指南</a>
 
 </td>
 </tr>
 
 
 </tbody></table>
 </div>
 <div class="round1"></div>
 <div class="round2"></div>
 <div class="round4"></div>
 </div>
 </div>
 
 <div id="wikiheader" style="margin-bottom: 1em;">
 
 <img id="star_img" src="xmemcached-User_Guide_zh_files/star_off.gif" 
style="cursor: pointer;" onclick="_CS_toggleStar(this,
 '',
 {'scope': 'wiki',
 'user': '_CURRENT_USER',
 'item': 'xmemcached:User_Guide_zh',
 'token': codesite_token
 });" height="15" width="15">
 
 &nbsp;
 <span style="font-size: 120%; font-weight: bold;">User_Guide_zh</span>
 &nbsp;
 
 
 <div style="font-style: italic; margin-top: 3px;">用户指南 0.3版本</div>
 
 </div>
 <p></p><ul><li><a href="#%E5%8F%98%E6%9B%B4%E5%8E%86%E5%8F%B2">变更历史</a></li><li><a
 href="#XMemcached%E7%AE%80%E4%BB%8B">XMemcached简介</a></li><li><a 
href="#XMemcached%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7">XMemcached
的主要特性</a></li><ul><li><a href="#%E9%AB%98%E6%80%A7%E8%83%BD">高性能</a></li><li><a
 href="#%E6%94%AF%E6%8C%81%E5%AE%8C%E6%95%B4%E7%9A%84%E5%8D%8F%E8%AE%AE">支
持完整的协议</a></li><li><a 
href="#%E6%94%AF%E6%8C%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%86%E5%B8%83">支
持客户端分布</a></li><li><a 
href="#%E5%85%81%E8%AE%B8%E8%AE%BE%E7%BD%AE%E8%8A%82%E7%82%B9%E6%9D%83%E9%87%8D">允
许设置节点权重</a></li><li><a 
href="#%E5%8A%A8%E6%80%81%E5%A2%9E%E5%88%A0%E8%8A%82%E7%82%B9">动态增删节点</a></li><li><a
 href="#%E6%94%AF%E6%8C%81JMX">支持JMX</a></li><li><a 
href="#%E4%B8%8ESpring%E6%A1%86%E6%9E%B6%E5%92%8CHibernate-memcached%E7%9A%84%E9%9B%86%E6%88%90">与
Spring框架和Hibernate-memcached的集成</a></li><li><a 
href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5%E6%B1%A0">客户端连接池</a></li><li><a
 href="#%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7">可扩展性</a></li></ul><li><a 
href="#%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97">使用指南</a></li><ul><li><a 
href="#%E4%BE%9D%E8%B5%96%E5%8C%85">依赖包</a></li><li><a 
href="#%E5%A6%82%E6%9E%9C%E4%BD%A0%E4%BD%BF%E7%94%A8maven">如果你使用maven</a></li><li><a
 href="#%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90">简单例子</a></li><li><a 
href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%86%E5%B8%83">客户端分布</a></li><li><a
 href="#CAS%E6%93%8D%E4%BD%9C">CAS操作</a></li><li><a 
href="#%E6%9B%B4%E5%85%A8%E9%9D%A2%E7%9A%84%E4%BE%8B%E5%AD%90">更全面的例子</a></li><li><a
 href="#%E8%BF%AD%E4%BB%A3%E6%89%80%E6%9C%89key">迭代所有key</a></li><li><a 
href="#Incr/Decr">Incr/Decr</a></li><li><a 
href="#%E6%9F%A5%E7%9C%8B%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF">查看统计信息</a></li><li><a
 href="#SASL%E9%AA%8C%E8%AF%81">SASL验证</a></li><li><a 
href="#%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98">高级主题</a></li><ul><li><a 
href="#%E4%B8%8ESpring%E6%A1%86%E6%9E%B6%E9%9B%86%E6%88%90">与Spring框架集成</a></li><ul><li><a
 href="#Spring_3.0%E5%92%8CBuilder%E9%85%8D%E7%BD%AE">Spring 
3.0和Builder配置</a></li></ul><li><a 
href="#%E8%AE%BE%E7%BD%AE%E8%8A%82%E7%82%B9%E6%9D%83%E9%87%8D">设置节点权重</a></li><li><a
 href="#%E4%BD%BF%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8D%8F%E8%AE%AE">使
用二进制协议</a></li><li><a href="#JMX%E6%94%AF%E6%8C%81">JMX支持</a></li><li><a
 
href="#%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0/%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9">动
态添加/删除节点</a></li><li><a href="#Nio%E8%BF%9E%E6%8E%A5%E6%B1%A0">Nio连接池</a></li><li><a
 href="#%E4%B8%8EKestrel%E4%BA%A4%E4%BA%92">与Kestrel交互</a></li><li><a 
href="#%E4%B8%8Etokyotyrant%E4%BA%A4%E4%BA%92">与tokyotyrant交互</a></li><li><a
 href="#%E4%B8%8EHibernate-memcached%E9%9B%86%E6%88%90">与Hibernate-
memcached集成</a></li><li><a 
href="#%E5%8E%8B%E7%BC%A9%E3%80%81sanitizeKeys%E7%AD%89%E6%9D%82%E9%A1%B9">压
缩、sanitizeKeys等杂项</a></li><ul><li><a 
href="#%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9">数据压缩</a></li><li><a 
href="#packZeros">packZeros</a></li><li><a href="#sanitizeKeys">sanitizeKeys</a></li></ul></ul></ul></ul>
 <h1><a name="变更历史">变更历史</a><a 
href="#%E5%8F%98%E6%9B%B4%E5%8E%86%E5%8F%B2" class="section_anchor">¶</a></h1><p>2010-06-22
  添加客户端分布和SASL验证两节，更新spring配置一节。 2010-06-23  添加maven依赖说明 </p><h1><a 
name="XMemcached简介">XMemcached简介</a><a 
href="#XMemcached%E7%AE%80%E4%BB%8B" class="section_anchor">¶</a></h1><p>XMemcached
是一个新java memcached client。也许你还不知道memcached是什么？可以先看看<a 
href="http://code.google.com/p/memcached/" rel="nofollow">这里</a>。简单来
说，Memcached 
是一个高性能的分布式内存对象的key-value缓存系统，用于动态Web应用以减轻数据库负载，现在也有很多人将它作为内存式数据库在使
用，memcached通过它的自定义协议与客户端交互，而XMemcached就是它的一个java客户端实现。 </p><p>Memcached的
java客户端已经存在两个了：官方提供的基于传统阻塞io由<a href="http://www.whalin.com/memcached/" 
rel="nofollow">Greg Whalin维护的客户端</a>、Dustin Sallings实现的基于java nio的<a 
href="http://code.google.com/p/spymemcached" rel="nofollow">Spymemcached</a>。
另外还有一些在此基础上的改进版本。相比于这些客户端，XMemcached有什么优点呢？或者说，它的主要特性有哪些？ </p><h1><a 
name="XMemcached的主要特性">XMemcached的主要特性</a><a 
href="#XMemcached%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7" 
class="section_anchor">¶</a></h1><h2><a name="高性能">高性能</a><a 
href="#%E9%AB%98%E6%80%A7%E8%83%BD" class="section_anchor">¶</a></h2><p>XMemcached
同样是基于java nio的客户端，java 
nio相比于传统阻塞io模型来说，有效率高（特别在高并发下）和资源耗费相对较少的优点。传统阻塞IO为了提高效率，需要创建一定数量的连接形成连接
池，而nio仅需要一个连接即可（当然,nio也是可以做池化处理），相对来说减少了线程创建和切换的开销，这一点在高并发下特别明显。因此
XMemcached与Spymemcached在性能都非常优秀，在某些方面（存储的数据比较小的情况下）Xmemcached比
Spymemcached的表现更为优秀，具体可以看这个<a 
href="http://xmemcached.googlecode.com/svn/trunk/benchmark/benchmark.html"
 rel="nofollow">Java Memcached Clients Benchmark</a>。 </p><h2><a 
name="支持完整的协议">支持完整的协议</a><a 
href="#%E6%94%AF%E6%8C%81%E5%AE%8C%E6%95%B4%E7%9A%84%E5%8D%8F%E8%AE%AE" 
class="section_anchor">¶</a></h2><p>Xmemcached支持所有的memcached协议，包括1.4.0正式
开始使用的<a 
href="http://code.google.com/p/memcached/wiki/MemcacheBinaryProtocol" 
rel="nofollow">二进制协议</a>。 </p><h2><a name="支持客户端分布">支持客户端分布</a><a 
href="#%E6%94%AF%E6%8C%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%86%E5%B8%83" 
class="section_anchor">¶</a></h2><p>Memcached的分布只能通过客户端来实现，XMemcached实现了
此功能，并且提供了一致性哈希(consistent hash)算法的实现。 </p><h2><a name="允许设置节点权重">允许设置节点权
重</a><a 
href="#%E5%85%81%E8%AE%B8%E8%AE%BE%E7%BD%AE%E8%8A%82%E7%82%B9%E6%9D%83%E9%87%8D"
 class="section_anchor">¶</a></h2><p>XMemcached允许通过设置节点的权重来调节memcached的负
载，设置的权重越高，该memcached节点存储的数据将越多，所承受的负载越大。 </p><h2><a name="动态增删节点">动态增删节点</a><a
 href="#%E5%8A%A8%E6%80%81%E5%A2%9E%E5%88%A0%E8%8A%82%E7%82%B9" 
class="section_anchor">¶</a></h2><p>XMemcached允许通过JMX或者代码编程实现节点的动态添加或者移
除，方便用户扩展和替换节点等。 </p><h2><a name="支持JMX">支持JMX</a><a 
href="#%E6%94%AF%E6%8C%81JMX" class="section_anchor">¶</a></h2><p>XMemcached
通过JMX暴露的一些接口，支持client本身的监控和调整，允许动态设置调优参数、查看统计数据、动态增删节点等。 </p><h2><a 
name="与Spring框架和Hibernate-memcached的集成">与Spring框架和Hibernate-memcached的集成</a><a
 
href="#%E4%B8%8ESpring%E6%A1%86%E6%9E%B6%E5%92%8CHibernate-memcached%E7%9A%84%E9%9B%86%E6%88%90"
 class="section_anchor">¶</a></h2><p>鉴于很多项目已经使用Spring作为IOC容器，因此
XMemcached也提供了对Spring框架的集成支持。<a 
href="http://code.google.com/p/hibernate-memcached/" rel="nofollow">Hibernate-memcached</a>是
一个允许将memcached作为hibernate的二级缓存的开源项目，默认是使用Spymemcached，Xmemcached提供了对这个项目
的支持，允许替换Spymemcached. </p><h2><a name="客户端连接池">客户端连接池</a><a 
href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5%E6%B1%A0" 
class="section_anchor">¶</a></h2><p>刚才已经提到java 
nio通常对一个memcached节点使用一个连接，而XMemcached同样提供了设置连接池的功能，对同一个memcached可以创建N个连接
组成连接池来提高客户端在高并发环境下的表现，而这一切对使用者来说却是透明的。启用连接池的前提条件是保证数据之间的独立性或者数据更新的同步，对同一
个节点的各个连接之间是没有做更新同步的，因此应用需要保证数据之间是相互独立的或者全部采用CAS更新来保证原子性。 </p><h2><a 
name="可扩展性">可扩展性</a><a href="#%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7" 
class="section_anchor">¶</a></h2><p>XMemcached是基于java nio框架<a 
href="http://code.google.com/p/yanf4j/" rel="nofollow">yanf4j</a>实现的，因此在
实现上结构相对清楚，分层比较明晰，在xmemcached 
1.2.5之后已经将yanf4j合并到xmemcached，因此不再需要依赖yanf4j，下面是XMemcached的主要类的UML图: </p><p><img
 src="xmemcached-User_Guide_zh_files/main.jpg"> </p><h1><a name="使用指南">使
用指南</a><a href="#%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97" 
class="section_anchor">¶</a></h1><p>在简单介绍完XMemcached的主要特性之后，我们将进入
XMemcached的使用环节，这里将按照从简单到复杂的顺序讲解一些例子，以方便用户深入了解XMemcached的使用。 </p><h2><a 
name="依赖包">依赖包</a><a href="#%E4%BE%9D%E8%B5%96%E5%8C%85" 
class="section_anchor">¶</a></h2><p>Xmemcached依赖<a 
href="http://code.google.com/p/yanf4j/downloads/list" rel="nofollow">yanf4j</a>和<a
 href="http://www.slf4j.org/" rel="nofollow">slf4j</a>，其中yanf4j是笔者的一个开源
nio框架。<strong>注意，从xmemcached 1.2.5开始，xmemcached不再依赖yanf4j。</strong> </p><p><strong>xmemcached
 1.2.0和1.2.1版本依赖yanf4j 1.0.1</strong> </p><p><strong>xmemcached 
1.2.2依赖yanf4j 1.1.0</strong> </p><p><strong>xmemcached 
1.2.3和1.2.4版本都是依赖yanf4j 1.1.1</strong> </p><p>在测试下面讲到的代码之前，请先自行下载依赖包或者下载
包含了依赖包的xmemcached。 </p><h2><a name="如果你使用maven">如果你使用maven</a><a 
href="#%E5%A6%82%E6%9E%9C%E4%BD%A0%E4%BD%BF%E7%94%A8maven" 
class="section_anchor">¶</a></h2><p>如果你使用maven构建你的项目，那么只要添加dependency即可使
用xmemcached（仅对1.2.5及以后版本有效） </p><pre class="prettyprint"><span class="pln">&nbsp;</span><span class="tag">&lt;dependency&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp;</span><span class="tag">&lt;groupId&gt;</span><span class="pln">com.googlecode.xmemcached</span><span class="tag">&lt;/groupId&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp;</span><span class="tag">&lt;artifactId&gt;</span><span class="pln">xmemcached</span><span class="tag">&lt;/artifactId&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp;</span><span class="tag">&lt;version&gt;</span><span class="pln">1.2.5</span><span class="tag">&lt;/version&gt;</span><span class="pln"><br>&nbsp; </span><span class="tag">&lt;/dependency&gt;</span></pre><h2><a
 name="简单例子">简单例子</a><a href="#%E7%AE%80%E5%8D%95%E4%BE%8B%E5%AD%90" 
class="section_anchor">¶</a></h2><p>对于用户来说，最主要的功能是存取数据，假设我们有一个memcached节
点IP地址或者域名是host，端口是11211，一个简单的存取数据的例子如下： </p><pre class="prettyprint"><span class="pln">&nbsp; &nbsp; </span><span class="typ">MemcachedClientBuilder</span><span class="pln"> builder </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">XMemcachedClientBuilder</span><span class="pun">(</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">AddrUtil</span><span class="pun">.</span><span class="pln">getAddresses</span><span class="pun">(</span><span class="str">"localhost:11211"</span><span class="pun">));</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="typ">MemcachedClient</span><span class="pln"> memcachedClient </span><span class="pun">=</span><span class="pln"> builder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; memcachedClient</span><span class="pun">.</span><span class="kwd">set</span><span class="pun">(</span><span class="str">"hello"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Hello,xmemcached"</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">String</span><span class="pln"> value </span><span class="pun">=</span><span class="pln"> memcachedClient</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">"hello"</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"hello="</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> value</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; memcachedClient</span><span class="pun">.</span><span class="kwd">delete</span><span class="pun">(</span><span class="str">"hello"</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; value </span><span class="pun">=</span><span class="pln"> memcachedClient</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">"hello"</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"hello="</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> value</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">MemcachedException</span><span class="pln"> e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="pln">err</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"MemcachedClient operation fail"</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">TimeoutException</span><span class="pln"> e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="pln">err</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"MemcachedClient operation timeout"</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">InterruptedException</span><span class="pln"> e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">// ignore</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">try</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">//close memcached client</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; memcachedClient</span><span class="pun">.</span><span class="pln">shutdown</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">catch</span><span class="pln"> </span><span class="pun">(</span><span class="typ">IOException</span><span class="pln"> e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="pln">err</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Shutdown MemcachedClient fail"</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; e</span><span class="pun">.</span><span class="pln">printStackTrace</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span></pre><p>为
了节省篇幅，本文的所有代码示例都没有给出完整的package名，具体包名请查询javadoc或者使用IDE工具帮助引入。 </p><p>因为
XMemcachedClient的创建有比较多的可选项，因此提供了一个XMemcachedClientBuilder类用于构建
MemcachedClient。MemcachedClient是主要接口，操作memcached的主要方法都在这个接
口，XMemcachedClient是它的一个实现。传入的memcached节点列表要求是类似<strong>"host1:port1 
host2:port2 …"</strong>这样的字符串，通过AddrUtil.getAddresses方法获取实际的IP地址列表。 </p><p>存
储数据是通过set方法，它有三个参数，第一个是存储的key名称，第二个是expire时间（单位秒），超过这个时间,memcached将这个数据替
换出去，0表示永久存储（默认是一个月），第三个参数就是实际存储的数据，可以是任意的java可序列化类型。获取存储的数据是通过get方法，传入
key名称即可。如果要删除存储的数据，这是通过delete方法，它也是接受key名称作为参数。XMemcached由于是基于nio，因此通讯过程
本身是异步的，client发送一个请求给memcached，你是无法确定memcached什么时候返回这个应答，客户端此时只有等待，因此还有个等
待超时的概念在这里。客户端在发送请求后，开始等待应答，如果超过一定时间就认为操作失败，这个等待时间默认是一秒，上面例子展现的3个方法调用的都是默
认的超时时间，这三个方法同样有允许传入超时时间的重载方法，例如 </p><pre class="prettyprint"><span class="pln">&nbsp; &nbsp;value</span><span class="pun">=</span><span class="pln">client</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(“</span><span class="pln">hello</span><span class="pun">”,</span><span class="lit">3000</span><span class="pun">);</span></pre><p>就
是等待3秒超时，如果3秒超时就跑出TimeutException，用户需要自己处理这个异常。因为等待是通过调用
CountDownLatch.await(timeout)方法，因此用户还需要处理中断异常InterruptException。最后的
MemcachedException表示Xmemcached内部发生的异常，如解码编码错误、网络断开等等异常情况。 </p><h2><a 
name="客户端分布">客户端分布</a><a 
href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%86%E5%B8%83" 
class="section_anchor">¶</a></h2><p>Memcached的分布是通过客户端实现的，客户端根据key的哈希值得到
将要存储的memcached节点，并将对应的value存储到相应的节点。 </p><p>XMemcached同样支持客户端的分布策略，默认分布的
策略是按照key的哈希值模以连接数得到的余数，对应的连接就是将要存储的节点。如果使用默认的分布策略，你不需要做任何配置或者编程。 </p><p>XMemcached
同样支持<a href="http://en.wikipedia.org/wiki/Consistent_hashing" 
rel="nofollow">一致性哈希</a>（consistent hash)，通过编程设置： </p><pre class="prettyprint"><span class="pln">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">MemcachedClientBuilder</span><span class="pln"> builder </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">XMemcachedClientBuilder</span><span class="pun">(</span><span class="typ">AddrUtil</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">.</span><span class="pln">getAddresses</span><span class="pun">(</span><span class="pln">properties</span><span class="pun">.</span><span class="pln">getProperty</span><span class="pun">(</span><span class="str">"test.memcached.servers"</span><span class="pun">))</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; builder</span><span class="pun">.</span><span class="pln">setSessionLocator</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">KetamaMemcachedSessionLocator</span><span class="pun">());</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">MemcachedClient</span><span class="pln"> client</span><span class="pun">=</span><span class="pln">builder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">();</span></pre><p>配
置的方式请见spring配置一节。 </p><p>XMemcached还提供了额外的一种哈希算法——选举散列,在某些场景下可以替代一致性哈希 </p><pre class="prettyprint"><span class="pln">&nbsp; </span><span class="typ">MemcachedClientBuilder</span><span class="pln"> builder </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">XMemcachedClientBuilder</span><span class="pun">(</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">AddrUtil</span><span class="pun">.</span><span class="pln">getAddresses</span><span class="pun">(</span><span class="str">"server1:11211 server2:11211 server3:11211"</span><span class="pun">));</span><span class="pln"><br>&nbsp; builder</span><span class="pun">.</span><span class="pln">setSessionLocator</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ElectionMemcachedSessionLocator</span><span class="pun">());</span><span class="pln"><br>&nbsp; </span><span class="typ">MemcachedClient</span><span class="pln"> mc </span><span class="pun">=</span><span class="pln"> builder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">();</span></pre><h2><a
 name="CAS操作">CAS操作</a><a href="#CAS%E6%93%8D%E4%BD%9C" 
class="section_anchor">¶</a></h2><p>Memcached是通过cas协议实现原子更新，所谓原子更新就是
compare and 
set，原理类似乐观锁，每次请求存储某个数据同时要附带一个cas值，memcached比对这个cas值与当前存储数据的cas值是否相等，如果相等
就让新的数据覆盖老的数据，如果不相等就认为更新失败，这在并发环境下特别有用。XMemcached提供了对CAS协议的支持（无论是文本协议还是二进
制协议），CAS协议其实是分为两个步骤：获取CAS值和尝试更新，因此一个典型的使用场景如下： </p><pre class="prettyprint"><span class="pln">&nbsp; </span><span class="typ">GetsResponse</span><span class="pun">&lt;</span><span class="typ">Integer</span><span class="pun">&gt;</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> client</span><span class="pun">.</span><span class="pln">gets</span><span class="pun">(</span><span class="str">"a"</span><span class="pun">);</span><span class="pln"><br>&nbsp; </span><span class="kwd">long</span><span class="pln"> cas </span><span class="pun">=</span><span class="pln"> result</span><span class="pun">.</span><span class="pln">getCas</span><span class="pun">();</span><span class="pln"> <br>&nbsp; </span><span class="com">//尝试将a的值更新为2</span><span class="pln"><br>&nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">client</span><span class="pun">.</span><span class="pln">cas</span><span class="pun">(</span><span class="str">"a"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> cas</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="pln">err</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"cas error"</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp;</span><span class="pun">}</span></pre><p>首
先通过gets方法获取一个GetsResponse，此对象包装了存储的数据和cas值，然后通过cas方法尝试原子更新，如果失败打印”cas 
error”。显然，这样的方式很繁琐，并且如果你想尝试多少次原子更新就需要一个循环来包装这一段代码，因此XMemcached提供了一
个*CASOperation*接口包装了这部分操作，允许你尝试N次去原子更新某个key存储的数据，无需显式地调用gets获取cas值,上面的代码
简化为: </p><pre class="prettyprint"><span class="pln">&nbsp;client</span><span class="pun">.</span><span class="pln">cas</span><span class="pun">(</span><span class="str">"a"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">CASOperation</span><span class="pun">&lt;</span><span class="typ">Integer</span><span class="pun">&gt;()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> getMaxTries</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Integer</span><span class="pln"> getNewValue</span><span class="pun">(</span><span class="kwd">long</span><span class="pln"> currentCAS</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Integer</span><span class="pln"> currentValue</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">});</span></pre><p>CASOpertion
接口只有两个方法，一个是设置最大尝试次数的getMaxTries方法，这里是尝试一次，如果尝试超过这个次数没有更新成功将抛出一个
TimeoutException，如果你想无限尝试（理论上），可以将返回值设定为Integer.MAX_VALUE；另一个方法是根据当前获得的
GetsResponse来决定更新数据的getNewValue方法，如果更新成功，这个方法返回的值将存储成功，这个方法的两个参数是最新一次
gets返回的GetsResponse结果。 </p><h2><a name="更全面的例子">更全面的例子</a><a 
href="#%E6%9B%B4%E5%85%A8%E9%9D%A2%E7%9A%84%E4%BE%8B%E5%AD%90" 
class="section_anchor">¶</a></h2><p>一些更全面的例子，展现了MemcachedClient接口的主要方法： </p><pre class="prettyprint"><span class="pln">&nbsp; </span><span class="typ">MemcachedClientBuilder</span><span class="pln"> builder </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">XMemcachedClientBuilder</span><span class="pun">(</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">AddrUtil</span><span class="pun">.</span><span class="pln">getAddresses</span><span class="pun">(“</span><span class="pln">localhost</span><span class="pun">:</span><span class="lit">12000</span><span class="pun">”));</span><span class="pln"><br>&nbsp; </span><span class="typ">MemcachedClient</span><span class="pln"> client </span><span class="pun">=</span><span class="pln"> builder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; client</span><span class="pun">.</span><span class="pln">flushAll</span><span class="pun">();</span><span class="pln"><br>&nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">client</span><span class="pun">.</span><span class="kwd">set</span><span class="pun">(</span><span class="str">"hello"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="str">"world"</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="pln">err</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"set error"</span><span class="pun">);</span><span class="pln"><br>&nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">client</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="str">"hello"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="str">"dennis"</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="pln">err</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Add error,key is existed"</span><span class="pun">);</span><span class="pln"><br>&nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">client</span><span class="pun">.</span><span class="pln">replace</span><span class="pun">(</span><span class="str">"hello"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="str">"dennis"</span><span class="pun">))</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="pln">err</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"replace error"</span><span class="pun">);</span><span class="pln"><br>&nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; client</span><span class="pun">.</span><span class="pln">append</span><span class="pun">(</span><span class="str">"hello"</span><span class="pun">,</span><span class="pln"> </span><span class="str">" good"</span><span class="pun">);</span><span class="pln"><br>&nbsp; client</span><span class="pun">.</span><span class="pln">prepend</span><span class="pun">(</span><span class="str">"hello"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"hello "</span><span class="pun">);</span><span class="pln"><br>&nbsp; </span><span class="typ">String</span><span class="pln"> name </span><span class="pun">=</span><span class="pln"> client</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">"hello"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">StringTranscoder</span><span class="pun">());</span><span class="pln"><br>&nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">name</span><span class="pun">);</span><span class="pln"><br>&nbsp; client</span><span class="pun">.</span><span class="pln">deleteWithNoReply</span><span class="pun">(“</span><span class="pln">hello</span><span class="pun">”);</span></pre><p>首
先存储了hello对应的world字符串，然后调用add和replace方法去尝试添加和替换，因为数据已经存在，因此add会失败，同样
replace在数据存在的情况才会成功，也就是将hello对应的数据更新为dennis，然后通过append和prepend方法在dennis前
后加上了字符串hello和good，因此通过get返回的结果是hello dennis 
good。而删除数据则是通过deleteWithNoReply方法，这个方法删除数据并且告诉memcached不用返回应答，因此这个方法不会等待
应答直接返回，特别适合于批量处理；同样地，set、add、replace等方法也有相应的withNoReply重载版本，具体请看API文档。 </p><h2><a
 name="迭代所有key">迭代所有key</a><a 
href="#%E8%BF%AD%E4%BB%A3%E6%89%80%E6%9C%89key" class="section_anchor">¶</a></h2><p>Memcached
本身并没有提供迭代所有key的方法，但是通过"stats items"和"stats 
cachedump"统计协议可以做到迭代所有的key，这个迭代过程是低效，因此如无必要，并不推荐使用此方法。XMemcached仅提供了文本协议
的迭代支持，其他协议暂未支持。 </p><p>想迭代所有的key，你只需要获取一个KeyIterator即可： </p><pre class="prettyprint"><span class="typ">MemcachedClient</span><span class="pln"> client</span><span class="pun">=...</span><span class="pln"><br></span><span class="typ">KeyIterator</span><span class="pln"> it</span><span class="pun">=</span><span class="pln">client</span><span class="pun">.</span><span class="pln">getKeyIterator</span><span class="pun">(</span><span class="typ">AddrUtil</span><span class="pun">.</span><span class="pln">getOneAddress</span><span class="pun">(</span><span class="str">"localhost:11211"</span><span class="pun">));</span><span class="pln"><br></span><span class="kwd">while</span><span class="pun">(</span><span class="pln">it</span><span class="pun">.</span><span class="pln">hasNext</span><span class="pun">())</span><span class="pln"><br></span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp;</span><span class="typ">String</span><span class="pln"> key</span><span class="pun">=</span><span class="pln">it</span><span class="pun">.</span><span class="kwd">next</span><span class="pun">();</span><span class="pln"><br></span><span class="pun">}</span></pre><h2><a
 name="Incr/Decr">Incr/Decr</a><a href="#Incr/Decr" 
class="section_anchor">¶</a></h2><p>下面这个例子展现了incr/decr操作的使用，两个操作类似Java中的
原子类如AtomicIntger，用于原子递增或者递减变量数值： </p><pre class="prettyprint"><span class="pln">&nbsp;</span><span class="kwd">assert</span><span class="pun">(</span><span class="lit">1</span><span class="pun">==</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">memcachedClient</span><span class="pun">.</span><span class="pln">incr</span><span class="pun">(</span><span class="str">"a"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">));</span><span class="pln"><br>&nbsp;</span><span class="kwd">assert</span><span class="pun">(</span><span class="lit">6</span><span class="pun">==</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">memcachedClient</span><span class="pun">.</span><span class="pln">incr</span><span class="pun">(</span><span class="str">"a"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">));</span><span class="pln"><br>&nbsp;</span><span class="kwd">assert</span><span class="pun">(</span><span class="lit">10</span><span class="pun">==</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">memcachedClient</span><span class="pun">.</span><span class="pln">incr</span><span class="pun">(</span><span class="str">"a"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">4</span><span class="pun">));</span><span class="pln"><br>&nbsp;</span><span class="kwd">assert</span><span class="pun">(</span><span class="lit">9</span><span class="pun">==</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">memcachedClient</span><span class="pun">.</span><span class="pln">decr</span><span class="pun">(</span><span class="str">"a"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">));</span><span class="pln"><br>&nbsp;</span><span class="kwd">assert</span><span class="pun">(</span><span class="lit">7</span><span class="pun">==</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">memcachedClient</span><span class="pun">.</span><span class="pln">deccr</span><span class="pun">(</span><span class="str">"a"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">));</span></pre><p>incr
和decr都有三个参数的方法，第一个参数指定递增的key名称，第二个参数指定递增的幅度大小，第三个参数指定当key不存在的情况下的初始值。两个参
数的重载方法省略了第三个参数，默认指定为0。 </p><p>Xmemcached还提供了一个称为计数器的封装，它封装了incr/decr方法，使
用它就可以类似AtomicLong那样去操作计数： </p><pre class="prettyprint"><span class="pln">&nbsp; </span><span class="typ">Counter</span><span class="pln"> counter</span><span class="pun">=</span><span class="pln">client</span><span class="pun">.</span><span class="pln">getCounter</span><span class="pun">(</span><span class="str">"counter"</span><span class="pun">,</span><span class="lit">0</span><span class="pun">);</span><span class="pln"><br>&nbsp; counter</span><span class="pun">.</span><span class="pln">incrementAndGet</span><span class="pun">();</span><span class="pln"><br>&nbsp; counter</span><span class="pun">.</span><span class="pln">decrementAndGet</span><span class="pun">();</span><span class="pln"><br>&nbsp; counter</span><span class="pun">.</span><span class="pln">addAndGet</span><span class="pun">(-</span><span class="lit">10</span><span class="pun">);</span></pre><p>其
中getCounter的第二个参数是计数器的初始值。 </p><h2><a name="查看统计信息">查看统计信息</a><a 
href="#%E6%9F%A5%E7%9C%8B%E7%BB%9F%E8%AE%A1%E4%BF%A1%E6%81%AF" 
class="section_anchor">¶</a></h2><p>Memcached提供了统计协议用于查看统计信息： </p><pre class="prettyprint"><span class="pln">&nbsp; &nbsp;</span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">InetSocketAddress</span><span class="pun">,</span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="typ">String</span><span class="pun">&gt;&gt;</span><span class="pln"> result</span><span class="pun">=</span><span class="pln">client</span><span class="pun">.</span><span class="pln">getStats</span><span class="pun">();</span></pre><p>getStats
方法返回一个map，其中存储了所有已经连接并且有效的memcached节点返回的统计信息，你也可以统计具体的项目，如统计items项目： </p><pre class="prettyprint"><span class="pln">&nbsp; &nbsp;</span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">InetSocketAddress</span><span class="pun">,</span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="typ">String</span><span class="pun">&gt;&gt;</span><span class="pln"> result</span><span class="pun">=</span><span class="pln">client</span><span class="pun">.</span><span class="pln">getStatsByItem</span><span class="pun">(</span><span class="str">"items"</span><span class="pun">);</span></pre><p>只
要向getStatsByItem传入需要统计的项目名称即可。 </p><h2><a name="SASL验证">SASL验证</a><a 
href="#SASL%E9%AA%8C%E8%AF%81" class="section_anchor">¶</a></h2><p>Memcached
 
1.4.3开始支持SASL验证客户端，在服务器配置启用SASL之后，客户端需要通过授权验证才可以跟memcached继续交互，否则将被拒绝请求。
XMemcached 
1.2.5开始支持这个特性。假设memcached设置了SASL验证，典型地使用CRAM-MD5或者PLAIN的文本用户名和密码的验证机制，假设
用户名为cacheuser，密码为123456，那么编程的方式如下： </p><pre class="prettyprint"><span class="pln">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">MemcachedClientBuilder</span><span class="pln"> builder </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">XMemcachedClientBuilder</span><span class="pun">(</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">AddrUtil</span><span class="pun">.</span><span class="pln">getAddresses</span><span class="pun">(</span><span class="str">"localhost:11211"</span><span class="pun">));</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; builder</span><span class="pun">.</span><span class="pln">addAuthInfo</span><span class="pun">(</span><span class="typ">AddrUtil</span><span class="pun">.</span><span class="pln">getOneAddress</span><span class="pun">(</span><span class="str">"localhost:11211"</span><span class="pun">),</span><span class="pln"> </span><span class="typ">AuthInfo</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">.</span><span class="pln">typical</span><span class="pun">(</span><span class="str">"cacheuser"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"123456"</span><span class="pun">));</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">// Must use binary protocol</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; builder</span><span class="pun">.</span><span class="pln">setCommandFactory</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BinaryCommandFactory</span><span class="pun">());</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">MemcachedClient</span><span class="pln"> client</span><span class="pun">=</span><span class="pln">builder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">();</span></pre><p>请
注意，授权验证仅支持二进制协议。 </p><p>如果采用Spring配置，请参见spring配置一节。 </p><h2><a 
name="高级主题">高级主题</a><a href="#%E9%AB%98%E7%BA%A7%E4%B8%BB%E9%A2%98" 
class="section_anchor">¶</a></h2><h3><a name="与Spring框架集成">与Spring框架集成</a><a
 href="#%E4%B8%8ESpring%E6%A1%86%E6%9E%B6%E9%9B%86%E6%88%90" 
class="section_anchor">¶</a></h3><p>通过XMemcachedClientFactoryBean类，即可与
spring框架集成，简单的配置如下： </p><pre class="prettyprint"><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"memcachedClient"</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"net.rubyeye.xmemcached.utils.XMemcachedClientFactoryBean"</span><span class="pln"> </span><span class="atn">destroy-method</span><span class="pun">=</span><span class="atv">"shutdown"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"servers"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">host1:port1 host2:port2</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/property&gt;</span><span class="pln"><br>&nbsp; &nbsp;</span><span class="tag">&lt;/bean&gt;</span></pre><p>那
么你就可以在需要使用MemcachedClient的地方引用这个bean. </p><p>更完整的配置例子，设置协议类型、一致性哈希、权重、连接
池大小甚至SASL验证信息(xmemcached 1.2.5支持)，具体请看注释： </p><pre class="prettyprint"><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"server1"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"java.net.InetSocketAddress"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">host1</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">port1</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/constructor-arg&gt;</span><span class="pln"><br></span><span class="tag">&lt;/bean&gt;</span><span class="pln"><br></span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"memcachedClient"</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"net.rubyeye.xmemcached.utils.XMemcachedClientFactoryBean"</span><span class="pln"> </span><span class="atn">destroy-method</span><span class="pun">=</span><span class="atv">"shutdown"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"servers"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">host1:port1 host2:port2 host3:port3</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/property&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">&lt;!-- server's weights --&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"weights"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;list&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">1</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">2</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">3</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/list&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/property&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">&lt;!-- AuthInfo map,only valid on 1.2.5 or later version --&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"authInfoMap"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;map&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;entry</span><span class="pln"> </span><span class="atn">key-ref</span><span class="pun">=</span><span class="atv">"server1"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"net.rubyeye.xmemcached.auth.AuthInfo"</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="atn">factory-method</span><span class="pun">=</span><span class="atv">"typical"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">index</span><span class="pun">=</span><span class="atv">"0"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">cacheuser</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">index</span><span class="pun">=</span><span class="atv">"1"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">123456</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/bean&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/entry&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/map&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/property&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">&lt;!-- nio connection pool size --&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"connectionPoolSize"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"2"</span><span class="tag">&gt;&lt;/property&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="com">&lt;!-- Use binary protocol,default is TextCommandFactory --&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"commandFactory"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"net.rubyeye.xmemcached.command.BinaryCommandFactory"</span><span class="tag">&gt;&lt;/bean&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/property&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">&lt;!-- Distributed strategy --&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"sessionLocator"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"</span><span class="tag">&gt;&lt;/bean&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/property&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">&lt;!-- Serializing transcoder --&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"transcoder"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"net.rubyeye.xmemcached.transcoders.SerializingTranscoder"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/property&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="com">&lt;!-- ByteBuffer allocator --&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"bufferAllocator"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"net.rubyeye.xmemcached.buffer.SimpleBufferAllocator"</span><span class="tag">&gt;&lt;/bean&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/property&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/bean&gt;</span></pre><p>配
置选项参数表: </p><p></p><table><tbody><tr><td style="border: 1px solid 
rgb(170, 170, 170); padding: 5px;"> 属性名 </td><td style="border: 1px 
solid rgb(170, 170, 170); padding: 5px;"> 值 </td></tr> <tr><td 
style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> servers </td><td
 style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 
memcached节点列表，形如host1:port1 host2:port2的字符串 </td></tr> <tr><td 
style="border: 1px solid rgb(170, 170, 170); padding: 5px;">weights </td><td
 style="border: 1px solid rgb(170, 170, 170); padding: 5px;">与servers对应的
节点的权重，权重越高，连接数越多 </td></tr> <tr><td style="border: 1px solid rgb(170, 
170, 170); padding: 5px;"> authInfoMap </td><td style="border: 1px solid
 rgb(170, 170, 170); padding: 5px;"> 授权验证信息，仅在xmemcached 1.2.5及以上版本有效 </td></tr>
 <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 
connectionPoolSize </td><td style="border: 1px solid rgb(170, 170, 170);
 padding: 5px;"> nio连接池大小，默认为1  </td></tr> <tr><td style="border: 1px 
solid rgb(170, 170, 170); padding: 5px;">commandFactory </td><td 
style="border: 1px solid rgb(170, 170, 170); padding: 5px;">协议工
厂，net.rubyeye.xmemcached.command.BinaryCommandFactory,TextCommandFactory(默
认),KestrelCommandFactory </td></tr> <tr><td style="border: 1px solid 
rgb(170, 170, 170); padding: 5px;"> sessionLocator </td><td 
style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 
分布策略，一致性哈希net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator或者
ArraySessionLocator(默认) </td></tr> </tbody></table><p></p><table><tbody><tr><td
 style="border: 1px solid rgb(170, 170, 170); padding: 5px;">transcoder </td><td
 style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 
序列化转换器，默认使用net.rubyeye.xmemcached.transcoders.SerializingTranscoder，更多选项
参见javadoc </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 
170); padding: 5px;"> bufferAllocator </td><td style="border: 1px solid 
rgb(170, 170, 170); padding: 5px;"> 
IoBuffer分配器，默认为net.rubyeye.xmemcached.buffer.SimpleBufferAllocator，可选
CachedBufferAllocator(不推荐) </td></tr> </tbody></table><h4><a 
name="Spring_3.0和Builder配置">Spring 3.0和Builder配置</a><a 
href="#Spring_3.0%E5%92%8CBuilder%E9%85%8D%E7%BD%AE" 
class="section_anchor">¶</a></h4><p>Spring 3.0修改了查找destroy 
method的方式，因此如果还是采用上面的配置来集成xmemcached话，会在启动的时候抛出一个异常，信息类似“Couldn't find a
 destroy method named 'shutdown' on 
bean”，这种情况下xmemcached就无法正常工作，spring的IOC容器也无法正常启动。有没有解决办法呢？答案是有的，暂时可以通过
XmemcachedClientBuilder的工厂方法方式来创建MemcachedClient，也就是通过factory-bean加上
factory-method指定的方式，一个示范配置如下: </p><pre class="prettyprint"><span class="pln">&nbsp; &nbsp;</span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"memcachedClientBuilder"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"net.rubyeye.xmemcached.XMemcachedClientBuilder"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">&lt;!-- XMemcachedClientBuilder have two arguments.First is server list,and second is weights array. --&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;list&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"java.net.InetSocketAddress"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">localhost</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">12000</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/bean&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"java.net.InetSocketAddress"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">localhost</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">12001</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/bean&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/list&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;list&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">1</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">2</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/list&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"authInfoMap"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;map&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;entry</span><span class="pln"> </span><span class="atn">key-ref</span><span class="pun">=</span><span class="atv">"server1"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"net.rubyeye.xmemcached.auth.AuthInfo"</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="atn">factory-method</span><span class="pun">=</span><span class="atv">"typical"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">index</span><span class="pun">=</span><span class="atv">"0"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">cacheuser</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;constructor-arg</span><span class="pln"> </span><span class="atn">index</span><span class="pun">=</span><span class="atv">"1"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;value&gt;</span><span class="pln">123456</span><span class="tag">&lt;/value&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/constructor-arg&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/bean&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/entry&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/map&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/property&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"connectionPoolSize"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"2"</span><span class="tag">&gt;&lt;/property&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"commandFactory"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"net.rubyeye.xmemcached.command.TextCommandFactory"</span><span class="tag">&gt;&lt;/bean&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/property&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"sessionLocator"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"net.rubyeye.xmemcached.impl.KetamaMemcachedSessionLocator"</span><span class="tag">&gt;&lt;/bean&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/property&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;property</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"transcoder"</span><span class="tag">&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"net.rubyeye.xmemcached.transcoders.SerializingTranscoder"</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/property&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;/bean&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">&lt;!-- Use factory bean to build memcached client --&gt;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="tag">&lt;bean</span><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"memcachedClient3"</span><span class="pln"> </span><span class="atn">factory-bean</span><span class="pun">=</span><span class="atv">"memcachedClientBuilder"</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="atn">factory-method</span><span class="pun">=</span><span class="atv">"build"</span><span class="pln"> </span><span class="atn">destroy-method</span><span class="pun">=</span><span class="atv">"shutdown"</span><span class="tag">/&gt;</span></pre><h3><a
 name="设置节点权重">设置节点权重</a><a 
href="#%E8%AE%BE%E7%BD%AE%E8%8A%82%E7%82%B9%E6%9D%83%E9%87%8D" 
class="section_anchor">¶</a></h3><p>如果是通过spring配置，请看上一节，如果需要编程设置，通过下面代码：
 </p><pre class="prettyprint"><span class="pln">&nbsp;</span><span class="typ">MemcachedClientBuilder</span><span class="pln"> builder </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> &nbsp; &nbsp; <br></span><span class="typ">XMemcachedClientBuilder</span><span class="pun">(</span><span class="typ">AddrUtil</span><span class="pun">.</span><span class="pln">getAddresses</span><span class="pun">(</span><span class="str">"localhost:12000 localhost:12001"</span><span class="pun">),</span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">[]{</span><span class="lit">1</span><span class="pun">,</span><span class="lit">3</span><span class="pun">});</span><span class="pln"><br>&nbsp; &nbsp;</span><span class="typ">MemcachedClient</span><span class="pln"> memcachedClient</span><span class="pun">=</span><span class="pln">builder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">();</span></pre><p>传
入一个int数组，里面的元素就是节点对应的权重值，比如这里设置"localhost:12000"节点的权重为1，
而"localhost:12001"的权重为3。注意，xmemcached的权重是通过复制连接的多个引用来实现的，比如权重为3，那么就复制3个同
一个连接的引用放在集合中让MemcachedSessionLocator查找。 </p><p>改变节点权重，可以通过
setServerWeight方法： </p><pre class="prettyprint"><span class="pln">&nbsp;</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">XMemcachedClientMBean</span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="pun">....</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span><span class="com">/**<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* Set a memcached server's weight<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param server<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;* @param weight<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;*/</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setServerWeight</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> server</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> weight</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp;</span><span class="pun">}</span></pre><h3><a
 name="使用二进制协议">使用二进制协议</a><a 
href="#%E4%BD%BF%E7%94%A8%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8D%8F%E8%AE%AE" 
class="section_anchor">¶</a></h3><p>如果使用spring配置，请参见与spring集成一节。 </p><p>Memcached
 1.4开始正式启用二进制协议，xmemcached 
1.2开始支持二进制协议，启用这一特性也非常简单，设置相应的CommandFactory即可： </p><pre class="prettyprint"><span class="typ">MemcachedClientBuilder</span><span class="pln"> builder </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> &nbsp; &nbsp;</span><span class="typ">XMemcachedClientBuilder</span><span class="pun">(</span><span class="typ">AddrUtil</span><span class="pun">.</span><span class="pln">getAddresses</span><span class="pun">(</span><span class="str">"localhost:12000 localhost:12001"</span><span class="pun">),</span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">[]{</span><span class="lit">1</span><span class="pun">,</span><span class="lit">3</span><span class="pun">});</span><span class="pln"><br>&nbsp; &nbsp;builder</span><span class="pun">.</span><span class="pln">setCommandFactory</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">BinaryCommandFactory</span><span class="pun">());</span><span class="com">//use binary protocol </span><span class="pln"><br>&nbsp; &nbsp;</span><span class="typ">MemcachedClient</span><span class="pln"> memcachedClient</span><span class="pun">=</span><span class="pln">builder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">();</span></pre><p>默
认使用的TextCommandFactory，也就是文本协议。 </p><h3><a name="JMX支持">JMX支持</a><a 
href="#JMX%E6%94%AF%E6%8C%81" class="section_anchor">¶</a></h3><p>可以通过
JMX查看xmemcached的状态，在jvm启动参数中添加： </p><pre class="prettyprint"><span class="pln">&nbsp;java </span><span class="pun">-</span><span class="typ">Dxmemcached</span><span class="pun">.</span><span class="pln">jmx</span><span class="pun">.</span><span class="pln">enable</span><span class="pun">=</span><span class="kwd">true</span></pre><p>即
可通过JMX监控xmemcached状态，xmemcached通过RMI暴露服务接口： </p><pre class="prettyprint"><span class="pln">&nbsp;service</span><span class="pun">:</span><span class="pln">jmx</span><span class="pun">:</span><span class="pln">rmi</span><span class="pun">:</span><span class="com">///jndi/rmi://[host]:7077/xmemcachedServer </span></pre><p>你
可以在jconsole中查看这些MBean。 提供的MBean包括: </p><table><tbody><tr><td 
style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> MBean </td><td
 style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 描述 </td></tr>
 <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">net.rubyeye.xmemcached.monitor.StatisticsHandlerMBean
 </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 
用于查看Client统计信息 </td></tr> <tr><td style="border: 1px solid rgb(170, 170,
 170); padding: 5px;">net.rubyeye.xmemcached.impl.OptimizerMBean </td><td
 style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 用于调整性能参数 </td></tr>
 <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">net.rubyeye.xmemcached.XMemcachedClientMBean
 </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">动态
添加或者删除节点，查看有效服务器等信息</td></tr> </tbody></table><p>JMX的更多选项: </p><table><tbody><tr><td
 style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 选项 </td><td
 style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 描述</td></tr>
 <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">-Dxmemcached.rmi.port
 </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 
RMI端口 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); 
padding: 5px;">-Dxmemcached.rmi.name </td><td style="border: 1px solid 
rgb(170, 170, 170); padding: 5px;"> RMI服务名 </td></tr> </tbody></table><h3><a
 name="动态添加/删除节点">动态添加/删除节点</a><a 
href="#%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0/%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9"
 class="section_anchor">¶</a></h3><p>在JMX支持一节提到的JMX方式操作外，还可以通过编程方式： </p><pre class="prettyprint"><span class="pln">&nbsp; &nbsp; </span><span class="typ">MemcachedClient</span><span class="pln"> client</span><span class="pun">=</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">XMemcachedClient</span><span class="pun">(</span><span class="typ">AddrUtil</span><span class="pun">.</span><span class="pln">getAddresses</span><span class="pun">(</span><span class="str">"server1:11211 server2:11211"</span><span class="pun">));</span><span class="pln"><br>&nbsp; &nbsp;</span><span class="com">//Add two new memcached nodes</span><span class="pln"><br>&nbsp; &nbsp;client</span><span class="pun">.</span><span class="pln">addServer</span><span class="pun">(</span><span class="str">"server3:11211 server4:11211"</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp;</span><span class="com">//Remove memcached servers</span><span class="pln"><br>&nbsp; &nbsp;client</span><span class="pun">.</span><span class="pln">removeServer</span><span class="pun">(</span><span class="str">"server1:11211 server2:11211"</span><span class="pun">);</span></pre><h3><a
 name="Nio连接池">Nio连接池</a><a href="#Nio%E8%BF%9E%E6%8E%A5%E6%B1%A0" 
class="section_anchor">¶</a></h3><p>Xmemcached是基于java 
nio的client实现，默认对一个memcached节点只有一个连接，这在通常情况下已经有非常优异的表现。但是在典型的高并发环境下,nio的单
连接也会遇到性能瓶颈。因此XMemcached支持设置nio的连接池，允许建立多个连接到同一个memcached节点，但是请注意，这些连接之间是
不同步的，因此你的应用需要自己保证数据更新的同步，启用连接池可以通过下面代码：  </p><pre class="prettyprint"><span class="pln">&nbsp; </span><span class="typ">MemcachedClientBuilder</span><span class="pln"> builder </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> &nbsp; &nbsp;</span><span class="typ">XMemcachedClientBuilder</span><span class="pun">(</span><span class="typ">AddrUtil</span><span class="pun">.</span><span class="pln">getAddresses</span><span class="pun">(</span><span class="str">"localhost:12000"</span><span class="pun">));</span><span class="pln"><br><br>&nbsp; builder</span><span class="pun">.</span><span class="pln">setConnectionPoolSize</span><span class="pun">(</span><span class="lit">5</span><span class="pun">);</span></pre><p>如
果采用Spring配置，请参见与Spring集成一节。 </p><h3><a name="与Kestrel交互">与Kestrel交互</a><a
 href="#%E4%B8%8EKestrel%E4%BA%A4%E4%BA%92" class="section_anchor">¶</a></h3><p>Kestrel
是twitter开源的一个scala写的简单高效MQ，它支持 
memcached文本协议，但是并不完全兼容，例如它不支持flag，导致很多利用flag做序列化的客户端无法正常运作。因此Xmemcached特
意提供了KestrelCommandFactory?用于支持Kestrel。使用KestrelCommandFactory?即可拥有如下好处： 
 </p><p><strong> 默认关闭get优化，因为kestrel不支持bulk get； </strong></p><p><strong>
 支持kestrel的阻塞获取和可靠获取； </strong></p><p><strong> 
允许向kestrel存储任意java序列化类型。设置KestrelCommandFactory: </strong></p><pre class="prettyprint"><span class="pln">&nbsp;</span><span class="typ">MemcachedClientBuilder</span><span class="pln"> builder </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> &nbsp; &nbsp;</span><span class="typ">XMemcachedClientBuilder</span><span class="pun">(</span><span class="typ">AddrUtil</span><span class="pun">.</span><span class="pln">getAddresses</span><span class="pun">(</span><span class="str">"localhost:12000 localhost:12001"</span><span class="pun">),</span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">[]{</span><span class="lit">1</span><span class="pun">,</span><span class="lit">3</span><span class="pun">});</span><span class="pln"><br>&nbsp; &nbsp;builder</span><span class="pun">.</span><span class="pln">setCommandFactory</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">KestrelCommandFactory</span><span class="pun">());</span><span class="pln"><br>&nbsp; &nbsp;</span><span class="typ">MemcachedClient</span><span class="pln"> memcachedClient</span><span class="pun">=</span><span class="pln">builder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">();</span></pre><p>关
于最后一点需要补充说明，由于kestrel不支持flag，因此xmemcached在存储的数据之前加了4个字节的flag，如果你的全部应用都使用
xmemcached，那么没有问题，如果使用其他clients，会有兼容性的问题，因此Xmemcached还允许关闭这个功能，通过 </p><pre class="prettyprint"><span class="pln">client</span><span class="pun">.</span><span class="pln">setPrimitiveAsString</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span></pre><p>设
置为true后，原生类型都将存储为字符串，而序列化类型将无法存储了。  </p><h3><a name="与tokyotyrant交互">与
tokyotyrant交互</a><a href="#%E4%B8%8Etokyotyrant%E4%BA%A4%E4%BA%92" 
class="section_anchor">¶</a></h3><p>通过使用TokyoTyrantTranscoder就可以跟
TokyoTyrant进行交互，但是由于TokyoTyrant对memcached文本协议的flag,exptime不支持，因此内部
TokyoTyrantTranscoder加了4个字节的flag在value前面，如果你的全部应用都使用xmemcached，那么没有问题，如果
使用其他clients，会有兼容性的问题，这一点与跟kestrel交互相同。 </p><pre class="prettyprint"><span class="pln">&nbsp;</span><span class="typ">MemcachedClientBuilder</span><span class="pln"> builder </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> &nbsp; &nbsp;</span><span class="typ">XMemcachedClientBuilder</span><span class="pun">(</span><span class="typ">AddrUtil</span><span class="pun">.</span><span class="pln">getAddresses</span><span class="pun">(</span><span class="str">"localhost:12000 localhost:12001"</span><span class="pun">),</span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">[]{</span><span class="lit">1</span><span class="pun">,</span><span class="lit">3</span><span class="pun">});</span><span class="pln"><br>&nbsp; &nbsp;builder</span><span class="pun">.</span><span class="pln">setTranscoder</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">TokyoTyrantTranscoder</span><span class="pun">());</span><span class="pln"><br>&nbsp; &nbsp;</span><span class="typ">MemcachedClient</span><span class="pln"> memcachedClient</span><span class="pun">=</span><span class="pln">builder</span><span class="pun">.</span><span class="pln">build</span><span class="pun">();</span></pre><h3><a
 name="与Hibernate-memcached集成">与Hibernate-memcached集成</a><a 
href="#%E4%B8%8EHibernate-memcached%E9%9B%86%E6%88%90" 
class="section_anchor">¶</a></h3><p>大多数配置与采用spymemcahed一样，具体请看hibernate-
memcached的wiki页。如果使用 xmemcached，首先需要将memcacheClientFactory 
设置为XmemcachedClientFactory。 </p><p></p><table><tbody><tr><td 
style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> <strong>Property</strong>
 </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> <strong>Value</strong>
 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); 
padding: 5px;">hibernate.memcached.memcacheClientFactory </td><td 
style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 
net.rubyeye.xmemcached.utils.hibernate.XmemcachedClientFactory </td></tr>
 </tbody></table><p>其他一般选项有很大不同： </p><table><tbody><tr><td 
style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> <strong>Property</strong>
 </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> <strong>Value</strong>
 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); 
padding: 5px;">hibernate.memcached.servers </td><td style="border: 1px 
solid rgb(170, 170, 170); padding: 5px;"> localhost:11211 
localhost:11212</td></tr> <tr><td style="border: 1px solid rgb(170, 170,
 170); padding: 5px;">ibernate.memcached.cacheTimeSeconds </td><td 
style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 300</td></tr>
 <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">hibernate.memcached.keyStrategy
    </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">
 HashCodeKeyStrategy </td></tr> <tr><td style="border: 1px solid 
rgb(170, 170, 170); padding: 5px;">hibernate.memcached.readBufferSize </td><td
 style="border: 1px solid rgb(170, 170, 170); padding: 5px;">DEFAULT_SESSION_READ_BUFF_SIZE
 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); 
padding: 5px;">hibernate.memcached.operationTimeout </td><td 
style="border: 1px solid rgb(170, 170, 170); padding: 5px;">DEFAULT_OP_TIMEOUT
 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); 
padding: 5px;">hibernate.memcached.hashAlgorithm  </td><td 
style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 
NATIVE_HASH,KETAMA_HASH etc.</td></tr> <tr><td style="border: 1px solid 
rgb(170, 170, 170); padding: 5px;">hibernate.memcached.commandFactory </td><td
 style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 
TextCommandFactory , BinaryCommandFactory </td></tr> <tr><td 
style="border: 1px solid rgb(170, 170, 170); padding: 5px;">hiberante.memcached.sessionLocator
 </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 
ArrayMemcachedSessionLocator,KetamaMemcachedSessionLocator</td></tr> </tbody></table><h3><a
 name="压缩、sanitizeKeys等杂项">压缩、sanitizeKeys等杂项</a><a 
href="#%E5%8E%8B%E7%BC%A9%E3%80%81sanitizeKeys%E7%AD%89%E6%9D%82%E9%A1%B9"
 class="section_anchor">¶</a></h3><h4><a name="数据压缩">数据压缩</a><a 
href="#%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9" class="section_anchor">¶</a></h4><p>memcached
存储大数据的效率是比较低的，当数据比较大的时候xmemcached会帮你压缩在存储，取出来的时候自动解压并反序列化，这个大小阀值默认是16K，可
以通过Transcoder接口的setCompressionThreshold(1.2.1引入)方法修改阀值，比如设置为1K： </p><pre class="prettyprint"><span class="pln">memcachedClient</span><span class="pun">.</span><span class="pln">getTranscoder</span><span class="pun">()).</span><span class="pln">setCompressionThreshold</span><span class="pun">(</span><span class="lit">1024</span><span class="pun">);</span></pre><p>这
个方法是在1.2.1引入到Transcoder接口，在此之前，你需要通过强制转换来设置： </p><pre class="prettyprint"><span class="pln">&nbsp;</span><span class="pun">((</span><span class="typ">SerializingTranscoder</span><span class="pun">)</span><span class="pln">memcachedClient</span><span class="pun">.</span><span class="pln">getTranscoder</span><span class="pun">()).</span><span class="pln">setCompressionThreshold</span><span class="pun">(</span><span class="lit">1024</span><span class="pun">);</span></pre><h4><a
 name="packZeros">packZeros</a><a href="#packZeros" 
class="section_anchor">¶</a></h4><p>XMemcached的序列化转换器在序列化数值类型的时候有个特殊处理，如
果前面N个字节都是0，那么将会去除这些0，缩减后的数据将更小，例如数字3序列化是0x0003，那么前面3个0将去除掉成一个字节0x3。反序列化的
时候将自动在前面根据数值类型补0。这一特性默认是开启的，如果考虑到与其他client兼容的话需要关闭此特性可以通过： </p><pre class="prettyprint"><span class="pln">memcachedClient</span><span class="pun">.</span><span class="pln">getTranscoder</span><span class="pun">()).</span><span class="pln">setPackZeros</span><span class="pun">(</span><span class="kwd">false</span><span class="pun">);</span></pre><h4><a
 name="sanitizeKeys">sanitizeKeys</a><a href="#sanitizeKeys" 
class="section_anchor">¶</a></h4><p>在官方客户端有提供一个sanitizeKeys选项，当选择用URL当
key的时候，MemcachedClient会自动将URL encode再存储。默认是关闭的，想启用可以通过： </p><pre class="prettyprint"><span class="pln">&nbsp;memcachedClient</span><span class="pun">.</span><span class="pln">setSanitizeKeys</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span></pre><p>这
一特性将在1.2.1中引入。 </p>
 </td> 
 </tr>
 </tbody></table>
 </div>


 
 <br>
 


 
 
 
 
 
 
 
 
 
 
 

<div class="collapse">


 


<div id="commentlist">

 
 <div class="artifactcomment">
 
 
 
 
 
 
 <span class="author">Comment
 
 by
 
 <a style="white-space: nowrap;" 
href="http://code.google.com/u/AvinDev/">AvinDev</a>,
 
 </span>
 <span class="date" title="Mon Nov 30 22:57:28 2009">Nov 30, 2009</span>
 <div>
<div class="commentcontent">
<p>不错，内容很全面! </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment">
 
 
 
 
 
 
 <span class="author">Comment
 
 by
 
 <a style="white-space: nowrap;" href="http://code.google.com/u/xoeleo/">xoeleo</a>,
 
 </span>
 <span class="date" title="Sat Dec 26 23:48:59 2009">Dec 26, 2009</span>
 <div>
<div class="commentcontent">
<p>你的包里面怎么不整合 那个什么 yanf4j ? 害的我这 NoClassDefine<a 
href="http://code.google.com/p/xmemcached/w/edit/NoClassDefine">?</a> </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment">
 
 
 
 
 
 
 <span class="author">Comment
 
 by
 
 <a style="white-space: nowrap;" 
href="http://code.google.com/u/ccx1999/">ccx1999</a>,
 
 </span>
 <span class="date" title="Thu Jan 14 18:13:03 2010">Jan 14, 2010</span>
 <div>
<div class="commentcontent">
<p>有没测试过与Hibernate-memcached集成的？ 怎么我不行的 </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment">
 
 
 
 
 
 
 <span class="author">Comment
 
 by
 
 <a style="white-space: nowrap;" href="http://code.google.com/u/cnscud/">cnscud</a>,
 
 </span>
 <span class="date" title="Sun Jun 27 02:27:38 2010">Jun 27, 2010</span>
 <div>
<div class="commentcontent">
<p>动态添加/删除节点  --- 如何保证是对当前实例增加的? 是不是要对所有实例都执行一遍? 不了解内部实现  </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment">
 
 
 
 
 
 
 <span class="author">Comment
 
 by
 
 <a style="white-space: nowrap;" 
href="http://code.google.com/u/killme2008/">killme2008</a>,
 
 </span>
 <span class="date" title="Sun Jun 27 02:48:57 2010">Jun 27, 2010</span>
 <div>
<div class="commentcontent">
<p>@cnscud 你是说JMX吧？如果是编程，那肯定没有这个问题。 现在的JMX只支持一个实例，所以暂时不会有你这个问题。 
下个版本将修正这个问题，允许注册多个MBean表示不同实例，并且实例可以命名来区分。 </p>
</div>
 
 
 </div>
 </div>
 

</div>
</div>

 


 <script type="text/javascript">
 function delComment(sequence_num, delete_mode) {
 var f = document.forms["delcom"];
 f.sequence_num.value = sequence_num;
 f.mode.value = delete_mode;
 f.submit();
 return false;
 }
 </script>


 
 
 
 
 
 <div id="commentform">
 <form action="../w/detail.do" method="post">
 <table>
 <tbody><tr><td class="vt">
 <input name="pagename" value="User_Guide_zh" type="hidden">
 <input name="token" value="68c759799b4e016736549b2ba2822783" 
type="hidden">
 <div>Enter a comment:</div>
 <textarea name="content" rows="6" cols="80"></textarea><br><br>
 <input name="submit" value="Submit" type="submit">
 </td>
 <td class="vt">
 <div id="whb" class="tip" style="width: 15em;">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner closed" id="entrybubble">
 <a class="ifClosed" href="#whb" style="float: right;" 
onclick="_toggleHidden(this); 
document.getElementById('wikihelp').value='opened'">show</a>
 <a class="ifOpened" href="#whb" style="float: right;" 
onclick="_toggleHidden(this); 
document.getElementById('wikihelp').value='closed'">hide</a>
 <b>Wiki markup help</b>
 <div class="ifOpened">
 <div style="padding: 2px; font-size: 96%;">
 =Heading1=<br>
 ==Heading2==<br>
 ===Heading3===<br>
 <br>
 *bold* &nbsp; &nbsp;
 _italic_<br>
 `inline code`<br>
 escape: `*`<br>
 <br>
 Indent lists 2 spaces:<br>
 &nbsp;&nbsp;* bullet item<br>
 &nbsp;&nbsp;# numbered list<br>
 <br>
 {{{<br>
 verbatim code block<br>
 }}}<br>
 <br>
 Horizontal rule<br>
 ----
 <br>
 <br>
 WikiWordLink<br>
 [http://domain/page&nbsp;label]<br>
 http://domain/page<br>
 <br>
 || table || cells ||<br>
 
 </div><br>
 <a href="http://code.google.com/p/support/wiki/WikiSyntax" target="new">More

 examples</a>
 <a href="http://code.google.com/p/support/wiki/WikiSyntax" target="new"><img
 src="xmemcached-User_Guide_zh_files/tearoff_icon.gif" height="16" 
width="16"></a>
 </div>
 </div>
 <div class="round1"></div>
 <div class="round2"></div>
 <div class="round4"></div>
</div>
<input name="wikihelp" id="wikihelp" value="closed" type="hidden">

 </td></tr>
 </tbody></table>
 </form>
 </div>
 
 
 

<form name="delcom" action="../w/delComment.do" method="POST">
 <input name="sequence_num" value="" type="hidden">
 <input name="mode" value="" type="hidden">
 <input name="pagename" value="User_Guide_zh" type="hidden">
 <input name="token" value="68c759799b4e016736549b2ba2822783" 
type="hidden">
</form>


 <script src="xmemcached-User_Guide_zh_files/dwiki_scripts_20081003.js"></script>


<script src="xmemcached-User_Guide_zh_files/prettify.js"></script>
<script type="text/javascript">
 prettyPrint();
</script>
<script type="text/javascript" src="xmemcached-User_Guide_zh_files/dit_scripts_20081013.js"></script>



  
 
 <script type="text/javascript" src="xmemcached-User_Guide_zh_files/core_scripts_20081103.js"></script>
 <script type="text/javascript" src="xmemcached-User_Guide_zh_files/codesite_product_dictionary_ph.js"></script>
 </div>
<div id="footer" dir="ltr">
 
 <div class="text">
 
 ©2010 Google -
 <a href="http://code.google.com/projecthosting/terms.html">Terms</a> -
 <a href="http://www.google.com/privacy.html">Privacy</a> -
 <a href="http://code.google.com/p/support/">Project Hosting Help</a>
 
 </div>
</div>

 <div class="hostedBy" style="margin-top: -20px;">
 <span style="vertical-align: top;">Powered by <a 
href="http://code.google.com/projecthosting/">Google Project Hosting</a></span>
 </div>
 
 


 
 <div style="position: absolute; top: 19px; left: 589px; display: none;"
 id="menuDiv-projects-dropdown" class="menuDiv instance0"><div 
class="menuCategory controls first"><hr class="menuSeparator"><a 
href="http://code.google.com/more/" style="display: block;" 
class="menuItem">Find developer products...</a><a 
href="http://code.google.com/hosting/" style="display: block;" 
class="menuItem">Find open source projects...</a></div></div></body></html>