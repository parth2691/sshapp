SET CLUSTER '';
SET DEFAULT_TABLE_TYPE 0;
SET WRITE_DELAY 500;
SET DEFAULT_LOCK_TIMEOUT 2000;
SET CACHE_SIZE 16384;
CREATE USER IF NOT EXISTS SA SALT '1785a0bdf780ac5e' HASH '92cffe831095a1ca4214a6502527507b13f382b9aa5c58467b0a06f8ca779645' ADMIN;
CREATE CACHED TABLE PUBLIC.SS_POST(
    ID VARCHAR(16) NOT NULL,
    DTYPE VARCHAR(32) NOT NULL,
    CONTENT CLOB,
    MODIFY_TIME TIMESTAMP,
    TITLE VARCHAR(255) NOT NULL,
    USER_ID VARCHAR(16),
    SUBJECT_ID VARCHAR(16)
);
ALTER TABLE PUBLIC.SS_POST ADD CONSTRAINT PUBLIC.CONSTRAINT_B PRIMARY KEY(ID);
-- 2 +/- SELECT COUNT(*) FROM PUBLIC.SS_POST;
INSERT INTO PUBLIC.SS_POST(ID, DTYPE, CONTENT, MODIFY_TIME, TITLE, USER_ID, SUBJECT_ID) VALUES
('1', 'Subject', 'Hello World!!', TIMESTAMP '2009-07-18 00:45:14.988', 'HelloWorld', '1', NULL),
('2', 'Reply', 'Good Morning!!', TIMESTAMP '2009-07-19 02:18:28.988', 'GoodMorning', '1', '1');
CREATE CACHED TABLE PUBLIC.SS_ROLE(
    ID VARCHAR(16) NOT NULL,
    NAME VARCHAR(255) NOT NULL
);
ALTER TABLE PUBLIC.SS_ROLE ADD CONSTRAINT PUBLIC.CONSTRAINT_B9A PRIMARY KEY(ID);
-- 2 +/- SELECT COUNT(*) FROM PUBLIC.SS_ROLE;
INSERT INTO PUBLIC.SS_ROLE(ID, NAME) VALUES
('1', 'Admin'),
('2', 'User');
CREATE CACHED TABLE PUBLIC.SS_USER(
    ID VARCHAR(16) NOT NULL,
    CREATE_BY VARCHAR(255),
    CREATE_TIME TIMESTAMP,
    LAST_MODIFY_BY VARCHAR(255),
    LAST_MODIFY_TIME TIMESTAMP,
    EMAIL VARCHAR(255),
    LOGIN_NAME VARCHAR(255) NOT NULL,
    NAME VARCHAR(255),
    PLAIN_PASSWORD VARCHAR(255),
    SHA_PASSWORD VARCHAR(255),
    STATUS VARCHAR(255),
    VERSION INTEGER
);
ALTER TABLE PUBLIC.SS_USER ADD CONSTRAINT PUBLIC.CONSTRAINT_B9AA0 PRIMARY KEY(ID);
-- 6 +/- SELECT COUNT(*) FROM PUBLIC.SS_USER;
INSERT INTO PUBLIC.SS_USER(ID, CREATE_BY, CREATE_TIME, LAST_MODIFY_BY, LAST_MODIFY_TIME, EMAIL, LOGIN_NAME, NAME, PLAIN_PASSWORD, SHA_PASSWORD, STATUS, VERSION) VALUES
('1', 'admin', TIMESTAMP '2009-07-11 08:52:25.805', NULL, NULL, 'admin@springside.org.cn', 'admin', 'Admin', 'admin', 'd033e22ae348aeb5660fc2140aec35850c4da997', 'enabled', 1),
('2', 'admin', TIMESTAMP '2009-07-11 08:52:25.809', 'admin', TIMESTAMP '2009-09-03 23:22:40.625', 'user@springside.org.cn', 'user', 'Calvin', 'user', '12dea96fec20593566ab75692c9949596833adc9', 'enabled', 2),
('3', 'admin', TIMESTAMP '2009-07-11 08:52:25.814', NULL, NULL, 'jack@springside.org.cn', 'user2', 'Jack', 'user2', 'a1881c06eec96db9901c7bbfe41c42a3f08e9cb4', 'enabled', 1),
('4', 'admin', TIMESTAMP '2009-07-11 08:52:25.818', NULL, NULL, 'kate@springside.org.cn', 'user3', 'Kate', 'user3', '0b7f849446d3383546d15a480966084442cd2193', 'enabled', 1),
('5', 'admin', TIMESTAMP '2009-07-11 08:52:25.822', NULL, NULL, 'sawyer@springside.org.cn', 'user4', 'Sawyer', 'user4', '06e6eef6adf2e5f54ea6c43c376d6d36605f810e', 'enabled', 1),
('6', 'admin', TIMESTAMP '2009-07-11 08:52:25.827', NULL, NULL, 'ben@springside.org.cn', 'user5', 'Ben', 'user5', '7d112681b8dd80723871a87ff506286613fa9cf6', 'enabled', 1);
CREATE CACHED TABLE PUBLIC.SS_USER_ROLE(
    USER_ID VARCHAR(16) NOT NULL,
    ROLE_ID VARCHAR(16) NOT NULL
);
ALTER TABLE PUBLIC.SS_USER_ROLE ADD CONSTRAINT PUBLIC.CONSTRAINT_2 PRIMARY KEY(USER_ID, ROLE_ID);
-- 7 +/- SELECT COUNT(*) FROM PUBLIC.SS_USER_ROLE;
INSERT INTO PUBLIC.SS_USER_ROLE(USER_ID, ROLE_ID) VALUES
('1', '1'),
('1', '2'),
('2', '2'),
('3', '2'),
('4', '2'),
('5', '2'),
('6', '2');
CREATE CACHED TABLE PUBLIC.SS_LOG(
    THREAD_NAME VARCHAR(255),
    LOGGER_NAME VARCHAR(255),
    LOG_TIME TIMESTAMP,
    LEVEL VARCHAR(20),
    MESSAGE VARCHAR(255)
);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.SS_LOG;
CREATE CACHED TABLE PUBLIC.QRTZ_CALENDARS(
    CALENDAR_NAME VARCHAR(200) NOT NULL,
    CALENDAR IMAGE NOT NULL
);
ALTER TABLE PUBLIC.QRTZ_CALENDARS ADD CONSTRAINT PUBLIC.PK_QRTZ_CALENDARS PRIMARY KEY(CALENDAR_NAME);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_CALENDARS;
CREATE CACHED TABLE PUBLIC.QRTZ_CRON_TRIGGERS(
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    CRON_EXPRESSION VARCHAR(120) NOT NULL,
    TIME_ZONE_ID VARCHAR(80)
);
ALTER TABLE PUBLIC.QRTZ_CRON_TRIGGERS ADD CONSTRAINT PUBLIC.PK_QRTZ_CRON_TRIGGERS PRIMARY KEY(TRIGGER_NAME, TRIGGER_GROUP);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_CRON_TRIGGERS;
CREATE CACHED TABLE PUBLIC.QRTZ_FIRED_TRIGGERS(
    ENTRY_ID VARCHAR(95) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    IS_VOLATILE BOOLEAN NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    FIRED_TIME BIGINT NOT NULL,
    PRIORITY INTEGER NOT NULL,
    STATE VARCHAR(16) NOT NULL,
    JOB_NAME VARCHAR(200),
    JOB_GROUP VARCHAR(200),
    IS_STATEFUL BOOLEAN,
    REQUESTS_RECOVERY BOOLEAN
);
ALTER TABLE PUBLIC.QRTZ_FIRED_TRIGGERS ADD CONSTRAINT PUBLIC.PK_QRTZ_FIRED_TRIGGERS PRIMARY KEY(ENTRY_ID);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_FIRED_TRIGGERS;
CREATE CACHED TABLE PUBLIC.QRTZ_PAUSED_TRIGGER_GRPS(
    TRIGGER_GROUP VARCHAR(200) NOT NULL
);
ALTER TABLE PUBLIC.QRTZ_PAUSED_TRIGGER_GRPS ADD CONSTRAINT PUBLIC.PK_QRTZ_PAUSED_TRIGGER_GRPS PRIMARY KEY(TRIGGER_GROUP);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_PAUSED_TRIGGER_GRPS;
CREATE CACHED TABLE PUBLIC.QRTZ_SCHEDULER_STATE(
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT NOT NULL,
    CHECKIN_INTERVAL BIGINT NOT NULL
);
ALTER TABLE PUBLIC.QRTZ_SCHEDULER_STATE ADD CONSTRAINT PUBLIC.PK_QRTZ_SCHEDULER_STATE PRIMARY KEY(INSTANCE_NAME);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_SCHEDULER_STATE;
CREATE CACHED TABLE PUBLIC.QRTZ_LOCKS(
    LOCK_NAME VARCHAR(40) NOT NULL
);
ALTER TABLE PUBLIC.QRTZ_LOCKS ADD CONSTRAINT PUBLIC.PK_QRTZ_LOCKS PRIMARY KEY(LOCK_NAME);
-- 5 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_LOCKS;
INSERT INTO PUBLIC.QRTZ_LOCKS(LOCK_NAME) VALUES
('TRIGGER_ACCESS'),
('JOB_ACCESS'),
('CALENDAR_ACCESS'),
('STATE_ACCESS'),
('MISFIRE_ACCESS');
CREATE CACHED TABLE PUBLIC.QRTZ_JOB_DETAILS(
    JOB_NAME VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250),
    JOB_CLASS_NAME VARCHAR(250) NOT NULL,
    IS_DURABLE BOOLEAN NOT NULL,
    IS_VOLATILE BOOLEAN NOT NULL,
    IS_STATEFUL BOOLEAN NOT NULL,
    REQUESTS_RECOVERY BOOLEAN NOT NULL,
    JOB_DATA IMAGE
);
ALTER TABLE PUBLIC.QRTZ_JOB_DETAILS ADD CONSTRAINT PUBLIC.PK_QRTZ_JOB_DETAILS PRIMARY KEY(JOB_NAME, JOB_GROUP);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_JOB_DETAILS;
CREATE CACHED TABLE PUBLIC.QRTZ_JOB_LISTENERS(
    JOB_NAME VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    JOB_LISTENER VARCHAR(200) NOT NULL
);
ALTER TABLE PUBLIC.QRTZ_JOB_LISTENERS ADD CONSTRAINT PUBLIC.PK_QRTZ_JOB_LISTENERS PRIMARY KEY(JOB_NAME, JOB_GROUP, JOB_LISTENER);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_JOB_LISTENERS;
CREATE CACHED TABLE PUBLIC.QRTZ_SIMPLE_TRIGGERS(
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    REPEAT_COUNT BIGINT NOT NULL,
    REPEAT_INTERVAL BIGINT NOT NULL,
    TIMES_TRIGGERED BIGINT NOT NULL
);
ALTER TABLE PUBLIC.QRTZ_SIMPLE_TRIGGERS ADD CONSTRAINT PUBLIC.PK_QRTZ_SIMPLE_TRIGGERS PRIMARY KEY(TRIGGER_NAME, TRIGGER_GROUP);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_SIMPLE_TRIGGERS;
CREATE CACHED TABLE PUBLIC.QRTZ_BLOB_TRIGGERS(
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    BLOB_DATA IMAGE
);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_BLOB_TRIGGERS;
CREATE CACHED TABLE PUBLIC.QRTZ_TRIGGER_LISTENERS(
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    TRIGGER_LISTENER VARCHAR(200) NOT NULL
);
ALTER TABLE PUBLIC.QRTZ_TRIGGER_LISTENERS ADD CONSTRAINT PUBLIC.PK_QRTZ_TRIGGER_LISTENERS PRIMARY KEY(TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_LISTENER);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_TRIGGER_LISTENERS;
CREATE CACHED TABLE PUBLIC.QRTZ_TRIGGERS(
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    JOB_NAME VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    IS_VOLATILE BOOLEAN NOT NULL,
    DESCRIPTION VARCHAR(250),
    NEXT_FIRE_TIME BIGINT,
    PREV_FIRE_TIME BIGINT,
    PRIORITY INTEGER,
    TRIGGER_STATE VARCHAR(16) NOT NULL,
    TRIGGER_TYPE VARCHAR(8) NOT NULL,
    START_TIME BIGINT NOT NULL,
    END_TIME BIGINT,
    CALENDAR_NAME VARCHAR(200),
    MISFIRE_INSTR SMALLINT,
    JOB_DATA IMAGE
);
ALTER TABLE PUBLIC.QRTZ_TRIGGERS ADD CONSTRAINT PUBLIC.PK_QRTZ_TRIGGERS PRIMARY KEY(TRIGGER_NAME, TRIGGER_GROUP);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_TRIGGERS;
ALTER TABLE PUBLIC.SS_ROLE ADD CONSTRAINT PUBLIC.CONSTRAINT_B9 UNIQUE(NAME);
ALTER TABLE PUBLIC.SS_USER ADD CONSTRAINT PUBLIC.CONSTRAINT_B9AA UNIQUE(LOGIN_NAME);
ALTER TABLE PUBLIC.SS_POST ADD CONSTRAINT PUBLIC.FK8D193F1F7334D076 FOREIGN KEY(SUBJECT_ID) REFERENCES PUBLIC.SS_POST(ID) NOCHECK;
ALTER TABLE PUBLIC.SS_USER_ROLE ADD CONSTRAINT PUBLIC.FK1306854B4BFAA13E FOREIGN KEY(ROLE_ID) REFERENCES PUBLIC.SS_ROLE(ID) NOCHECK;
ALTER TABLE PUBLIC.SS_POST ADD CONSTRAINT PUBLIC.FK8D193F1FF125651E FOREIGN KEY(USER_ID) REFERENCES PUBLIC.SS_USER(ID) NOCHECK;
ALTER TABLE PUBLIC.QRTZ_TRIGGER_LISTENERS ADD CONSTRAINT PUBLIC.FK_QRTZ_TRIGGER_LISTENERS_QRTZ_TRIGGERS FOREIGN KEY(TRIGGER_NAME, TRIGGER_GROUP) REFERENCES PUBLIC.QRTZ_TRIGGERS(TRIGGER_NAME, TRIGGER_GROUP) ON DELETE CASCADE NOCHECK;
ALTER TABLE PUBLIC.QRTZ_CRON_TRIGGERS ADD CONSTRAINT PUBLIC.FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS FOREIGN KEY(TRIGGER_NAME, TRIGGER_GROUP) REFERENCES PUBLIC.QRTZ_TRIGGERS(TRIGGER_NAME, TRIGGER_GROUP) ON DELETE CASCADE NOCHECK;
ALTER TABLE PUBLIC.SS_USER_ROLE ADD CONSTRAINT PUBLIC.FK1306854BF125651E FOREIGN KEY(USER_ID) REFERENCES PUBLIC.SS_USER(ID) NOCHECK;
ALTER TABLE PUBLIC.QRTZ_SIMPLE_TRIGGERS ADD CONSTRAINT PUBLIC.FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS FOREIGN KEY(TRIGGER_NAME, TRIGGER_GROUP) REFERENCES PUBLIC.QRTZ_TRIGGERS(TRIGGER_NAME, TRIGGER_GROUP) ON DELETE CASCADE NOCHECK;
ALTER TABLE PUBLIC.QRTZ_TRIGGERS ADD CONSTRAINT PUBLIC.FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS FOREIGN KEY(JOB_NAME, JOB_GROUP) REFERENCES PUBLIC.QRTZ_JOB_DETAILS(JOB_NAME, JOB_GROUP) NOCHECK;
ALTER TABLE PUBLIC.QRTZ_JOB_LISTENERS ADD CONSTRAINT PUBLIC.FK_QRTZ_JOB_LISTENERS_QRTZ_JOB_DETAILS FOREIGN KEY(JOB_NAME, JOB_GROUP) REFERENCES PUBLIC.QRTZ_JOB_DETAILS(JOB_NAME, JOB_GROUP) ON DELETE CASCADE NOCHECK;
