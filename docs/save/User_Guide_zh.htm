<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html><head>
 


 
 
 


 <link rel="icon" type="image/vnd.microsoft.icon" href="http://www.gstatic.com/codesite/ph/images/phosting.ico">
 
 <script type="text/javascript">
 
 
 
 var codesite_token = "b59a9e34d855a1603a9302c41963759e";
 
 
 var logged_in_user_email = "young.jiandong@gmail.com";
 
 
 var relative_base_url = "";
 
 </script>
 
 
 <title>User_Guide_zh - 
 aviator -
 
 用户指南 使用手册 - Project Hosting on Google Code</title>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
 
 <meta name="ROBOTS" content="NOARCHIVE">
 
 <link type="text/css" rel="stylesheet" href="User_Guide_zh_files/ph_core.css">
 
 <link type="text/css" rel="stylesheet" href="User_Guide_zh_files/ph_detail.css">
 
 
 
 <link type="application/atom+xml" rel="alternate" href="http://code.google.com/feeds/p/aviator/svnchanges/basic?path=/wiki/User_Guide_zh.wiki">
 
 
<!--[if IE]>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/16517148615437166380/css/d_ie.css" >
<![endif]-->
 <style type="text/css">
 .menuIcon.off { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -42px }
 .menuIcon.on { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 -28px }
 .menuIcon.down { background: no-repeat url(http://www.gstatic.com/codesite/ph/images/dropdown_sprite.gif) 0 0; }
 </style>
<script src="User_Guide_zh_files/ga.js" async="" type="text/javascript"></script></head><body class="t6">
 <script type="text/javascript">
 var _gaq = _gaq || [];
 _gaq.push(
 ['siteTracker._setAccount', 'UA-18071-1'],
 ['siteTracker._trackPageview']);
 
 (function() {
 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
 (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
 })();
 </script>
 <div id="gaia">
 
 <span>
 
 
 <b>young.jiandong@gmail.com</b>
 
 
 | <a href="http://code.google.com/u/young.jiandong/" id="projects-dropdown" onclick="return false;"><u>My favorites</u> <small>▼</small></a>
 | <a href="http://code.google.com/u/young.jiandong/" onclick="_CS_click('/gb/ph/profile');" title="Profile, Updates, and Settings"><u>Profile</u></a>
 | <a href="https://www.google.com/accounts/Logout?continue=http%3A%2F%2Fcode.google.com%2Fp%2Faviator%2Fwiki%2FUser_Guide_zh" onclick="_CS_click('/gb/ph/signout');"><u>Sign out</u></a>
 
 </span>

 </div>
 <div class="gbh" style="left: 0pt;"></div>
 <div class="gbh" style="right: 0pt;"></div>
 
 
 <div style="height: 1px;"></div>
<!--[if IE 6]>
<div style="text-align:center;">
Support browsers that contribute to open source, try <a href="http://www.firefox.com">Firefox</a> or <a href="http://www.google.com/chrome">Google Chrome</a>.
</div>
<![endif]-->




 <table style="padding: 0px; margin: 20px 0px 0px; width: 100%;" cellpadding="0" cellspacing="0">
 <tbody><tr style="height: 58px;">
 
 <td style="width: 55px; text-align: center;">
 <a href="http://code.google.com/p/aviator/">
 
 <img src="User_Guide_zh_files/defaultlogo.png" alt="Logo">
 
 </a>
 </td>
 
 <td style="padding-left: 0.5em;">
 
 <div id="pname" style="margin: 0px 0px -3px;">
 <a href="http://code.google.com/p/aviator/" style="text-decoration: none; color: rgb(0, 0, 0);">aviator</a>
 
 </div>
 <div id="psum">
 <i><a id="project_summary_link" href="http://code.google.com/p/aviator/" style="text-decoration: none; color: rgb(0, 0, 0);">A high performance expression evaluator for java</a></i>
 </div>
 
 </td>
 <td style="white-space: nowrap; text-align: right;">
 
 <form action="/hosting/search">
 <input size="30" name="q">
 <input name="projectsearch" value="Search projects" type="submit">
 </form>
 
 </td></tr>
 </tbody></table>


 
<table id="mt" width="100%" border="0" cellpadding="0" cellspacing="0">
 <tbody><tr>
 <th onclick="if (!cancelBubble) _go('/p/aviator/');">
 <div class="tab inactive">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <a onclick="cancelBubble=true;" href="http://code.google.com/p/aviator/">Project&nbsp;Home</a>
 </div>
 </div>
 </th><td>&nbsp;&nbsp;</td>
 
 
 
 
 <th onclick="if (!cancelBubble) _go('/p/aviator/downloads/list');">
 <div class="tab inactive">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <a onclick="cancelBubble=true;" href="http://code.google.com/p/aviator/downloads/list">Downloads</a>
 </div>
 </div>
 </th><td>&nbsp;&nbsp;</td>
 
 
 
 
 
 <th onclick="if (!cancelBubble) _go('/p/aviator/w/list');">
 <div class="tab active">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <a onclick="cancelBubble=true;" href="http://code.google.com/p/aviator/w/list">Wiki</a>
 </div>
 </div>
 </th><td>&nbsp;&nbsp;</td>
 
 
 
 
 
 <th onclick="if (!cancelBubble) _go('/p/aviator/issues/list');">
 <div class="tab inactive">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <a onclick="cancelBubble=true;" href="http://code.google.com/p/aviator/issues/list">Issues</a>
 </div>
 </div>
 </th><td>&nbsp;&nbsp;</td>
 
 
 
 
 
 <th onclick="if (!cancelBubble) _go('/p/aviator/source/checkout');">
 <div class="tab inactive">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <a onclick="cancelBubble=true;" href="http://code.google.com/p/aviator/source/checkout">Source</a>
 </div>
 </div>
 </th><td>&nbsp;&nbsp;</td>
 
 
 <td width="100%">&nbsp;</td>
 </tr>
</tbody></table>
<table class="st" align="center" width="100%" border="0" cellpadding="0" cellspacing="0">
 <tbody><tr>
 
 
 
 <td>
 <div class="issueDetail">
<div class="isf">
 
 <span class="inIssueList"> 
 <span>Search</span>
 <form action="/p/aviator/w/list" method="GET" style="display: inline;">
 <select id="can" name="can" style="font-size: 92%;">
 <option disabled="disabled">Search within:</option>
 
 <option value="1">&nbsp;All wiki pages</option>
 <option value="3">&nbsp;Featured pages</option>
 <option value="2" selected="selected">&nbsp;Current pages</option>
 
 
 <option value="5">&nbsp;My starred pages</option>
 
 <option value="4">&nbsp;Deprecated pages</option>
 
 </select>
 <span>for</span>
 <span id="qq"><input size="38" id="searchq" name="q" autocomplete="off" style="font-size: 92%;" type="text"></span>
 
 
 <input value="Search" style="font-size: 92%;" type="submit">
 </form>
 </span>

 
 
 
 
 
 
 

</div>
</div>

 </td>
 
 
 
 
 
 
 <td class="bevel-right" align="right" valign="top" height="4">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 </td>
 </tr>
</tbody></table>
<script type="text/javascript">
 var cancelBubble = false;
 function _go(url) { document.location = url; }
</script>


<div id="maincol">

 
<!-- IE -->







 <style type="text/css">
 .artifactcomment {
 margin: .5em 0 0 0;
 padding: .3em 0 .3em .3em;
 border-top: 3px solid #c3d9ff;
 }
 #commentlist {
 border-bottom: 3px solid #c3d9ff;
 }
 #commentform { padding-top: 1em; }
 .delcom { background: #e8e8e8 }
 .commentcontent { margin: 1em 0;}
 </style>


 <div id="wikicontent">
 <table width="100%" border="0" cellpadding="0" cellspacing="0">
 <tbody><tr>
 
 <td class="vt" id="wikimaincol" width="100%">
 
 <div style="float: right; width: 18em;" id="wikimeta">
 <div class="pmeta_bubble_bg">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <table style="padding: 5px;">
 <tbody><tr><td colspan="2" style="padding-bottom: 5px;">Updated <span title="Mon Sep  6 23:40:58 2010">Sep 06, 2010</span>
 
 by <a style="white-space: nowrap;" href="http://code.google.com/u/killme2008/">killme2008</a>
 </td></tr>
 
 <tr><th class="vt">Labels:</th>
 <td>
 
 <a href="http://code.google.com/p/aviator/w/list?q=label:Phase-Support" title="Plans for user support and advocacy">Phase-Support</a>, 
 
 <a href="http://code.google.com/p/aviator/w/list?q=label:Featured" title="Listed on project home page">Featured</a>
 
 </td>
 </tr>
 
 
 </tbody></table>
 </div>
 <div class="round1"></div>
 <div class="round2"></div>
 <div class="round4"></div>
 </div>
 </div>
 
 <div id="wikiheader" style="margin-bottom: 1em;">
 
 <img id="star_img" src="User_Guide_zh_files/star_off.gif" style="cursor: pointer;" onclick="_CS_toggleStar(this,
 '',
 {'scope': 'wiki',
 'user': '_CURRENT_USER',
 'item': 'aviator:User_Guide_zh',
 'token': codesite_token
 });" width="15" height="15">
 
 &nbsp;
 <span style="font-size: 120%; font-weight: bold;">User_Guide_zh</span>
 &nbsp;
 
 
 <div style="font-style: italic; margin-top: 3px;">用户指南 使用手册</div>
 
 </div>
 <p></p><ul><li><a href="#%E7%89%88%E6%9C%AC%E5%8F%98%E6%9B%B4">版本变更</a></li><li><a href="#%E7%AE%80%E4%BB%8B">简介</a></li><li><a href="#%E7%89%B9%E6%80%A7">特性</a></li><li><a href="#%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84">整体结构</a></li><li><a href="#%E4%BE%9D%E8%B5%96%E5%8C%85">依赖包</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C">使用手册</a></li><ul><li><a href="#%E6%89%A7%E8%A1%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F">执行表达式</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F">使用变量</a></li><li><a href="#%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0">调用函数</a></li><ul><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0">自定义函数</a></li></ul><li><a href="#%E7%BC%96%E8%AF%91%E8%A1%A8%E8%BE%BE%E5%BC%8F">编译表达式</a></li><li><a href="#%E8%AE%BF%E9%97%AE%E6%95%B0%E7%BB%84%E5%92%8C%E9%9B%86%E5%90%88">访问数组和集合</a></li><li><a href="#%E4%B8%89%E5%85%83%E6%93%8D%E4%BD%9C%E7%AC%A6">三元操作符</a></li><li><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D">正则表达式匹配</a></li><li><a href="#%E5%8F%98%E9%87%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96%E8%A1%A3">变量的语法糖衣</a></li><li><a href="#nil%E5%AF%B9%E8%B1%A1">nil对象</a></li><li><a href="#%E6%97%A5%E6%9C%9F%E6%AF%94%E8%BE%83">日期比较</a></li><li><a href="#%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F">两种模式</a></li><li><a href="#%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C">语法手册</a></li><ul><li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a></li><li><a href="#%E6%93%8D%E4%BD%9C%E7%AC%A6">操作符</a></li><ul><li><a href="#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6">算术运算符</a></li><li><a href="#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6">逻辑运算符</a></li><li><a href="#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6">关系运算符</a></li><li><a href="#%E5%8C%B9%E9%85%8D%E8%BF%90%E7%AE%97%E7%AC%A6">匹配运算符</a></li><li><a href="#%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6">三元运算符</a></li></ul><li><a href="#%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%88%97%E8%A1%A8">操作符列表</a></li><li><a href="#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99">类型转换规则</a></li><li><a href="#%E5%B8%B8%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F">常量和变量</a></li><li><a href="#%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0">内置函数</a></li></ul></ul></ul> <h1><a name="版本变更">版本变更</a><a href="#%E7%89%88%E6%9C%AC%E5%8F%98%E6%9B%B4" class="section_anchor">¶</a></h1><p>当前版本 0.2 </p><ul><li>2010-06-28 完成0.1版本 </li><li>2010-09-07 修改完成0.2版本 </li></ul><h1><a name="简介">简介</a><a href="#%E7%AE%80%E4%BB%8B" class="section_anchor">¶</a></h1><p>Aviator是一个高性能、轻量级的java语言实现的表达式求值引擎，主要用于各种表达式的动态求值。现在已经有很多开源可用的java表达式求值引擎，为什么还需要Avaitor呢？ </p><p>Aviator的设计目标是<strong>轻量级</strong>和<strong>高性能 </strong>，相比于Groovy、JRuby的笨重，Aviator非常小，加上依赖包也才450K,不算依赖包的话只有70K；当然，Aviator的语法是受限的，它不是一门完整的语言，而只是语言的一小部分集合。 </p><p>其次，Aviator的实现思路与其他轻量级的求值器很不相同，其他求值器一般都是通过解释的方式运行，而Aviator则是直接将表达式<strong>编译成Java字节码</strong>，交给JVM去执行。简单来说，Aviator的定位是介于Groovy这样的重量级脚本语言和IKExpression这样的轻量级表达式引擎之间。 </p><h1><a name="特性">特性</a><a href="#%E7%89%B9%E6%80%A7" class="section_anchor">¶</a></h1><p>Aviator的特性 </p><ul><li>支持大部分运算操作符，包括算术操作符、关系运算符、逻辑操作符、正则匹配操作符(=~)、三元表达式?: ，并且支持操作符的优先级和括号强制优先级，具体请看后面的操作符列表。 </li></ul><p>  </p><ul><li>支持函数调用和自定义函数 </li></ul><ul><li>支持正则表达式匹配，类似Ruby、Perl的匹配语法，并且支持类Ruby的$digit指向匹配分组。 </li></ul><ul><li>自动类型转换，当执行操作的时候，会自动判断操作数类型并做相应转换，无法转换即抛异常。 </li></ul><ul><li>支持传入变量，支持类似a.b.c的嵌套变量访问。 </li></ul><ul><li>性能优秀 </li></ul><p>Aviator的限制： </p><ul><li>没有if else、do while等语句，没有赋值语句，仅支持逻辑表达式、算术表达式、三元表达式和正则匹配。 </li></ul><ul><li>没有位运算符 </li></ul><h1><a name="整体结构">整体结构</a><a href="#%E6%95%B4%E4%BD%93%E7%BB%93%E6%9E%84" class="section_anchor">¶</a></h1><p>Aviator的结构非常简单，一个典型的求值器的结构 </p><p><img src="User_Guide_zh_files/aviator.jpg"> </p><h1><a name="依赖包">依赖包</a><a href="#%E4%BE%9D%E8%B5%96%E5%8C%85" class="section_anchor">¶</a></h1><p><a href="http://commons.apache.org/beanutils/" rel="nofollow">commons-beanutils</a>和<a href="http://commons.apache.org/logging/" rel="nofollow">commons-logging</a> </p><h1><a name="使用手册">使用手册</a><a href="#%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C" class="section_anchor">¶</a></h1><h2><a name="执行表达式">执行表达式</a><a href="#%E6%89%A7%E8%A1%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F" class="section_anchor">¶</a></h2><p>Aviator的使用都是集中通过com.googlecode.aviator.AviatorEvaluator这个入口类来处理，最简单的例子，执行一个计算1+2+3的表达式： </p><pre class="prettyprint"><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">googlecode</span><span class="pun">.</span><span class="pln">aviator</span><span class="pun">.</span><span class="typ">AviatorEvaluator</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SimpleExample</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Long</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Long</span><span class="pun">)</span><span class="pln"> </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">"1+2+3"</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">result</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span></pre><p>细心的朋友肯定注意到结果是Long，而不是Integer。这是因为Aviator的数值类型仅支持Long和Double，任何整数都将转换成Long，任何浮点数都将转换为Double，包括用户传入的变量数值。这个例子的打印结果将是正确答案6。 </p><h2><a name="使用变量">使用变量</a><a href="#%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F" class="section_anchor">¶</a></h2><p>想让Aviator对你say hello吗？很简单，传入你的名字，让Aviator负责字符串的相加： </p><pre class="prettyprint"><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">googlecode</span><span class="pun">.</span><span class="pln">aviator</span><span class="pun">.</span><span class="typ">AviatorEvaluator</span><span class="pun">;</span><span class="pln"><br><br><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SayHello</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">args</span><span class="pun">.</span><span class="pln">length </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="pln">err</span><span class="pun">.</span><span class="kwd">print</span><span class="pun">(</span><span class="str">"Usesage: Java SayHello yourname"</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">String</span><span class="pln"> yourname </span><span class="pun">=</span><span class="pln"> args</span><span class="pun">[</span><span class="lit">0</span><span class="pun">];</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;</span><span class="pln"> env </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; env</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"yourname"</span><span class="pun">,</span><span class="pln"> yourname</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">String</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">String</span><span class="pun">)</span><span class="pln"> </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">" 'hello ' + yourname "</span><span class="pun">,</span><span class="pln"> env</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">result</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span></pre><p>上面的例子演示了怎么向表达式传入变量值，表达式中的yourname是一个变量，默认为null，通过传入Map&lt;String,Object&gt;的变量绑定环境，将yourname设置为你输入的名称。env的key是变量名，value是变量的值。 </p><p>上
面例子中的'hello 
'是一个Aviator的String，Aviator的String是任何用单引号或者双引号括起来的字符序列，String可以比较大小（基于
unicode顺序），可以参与正则匹配，可以与任何对象相加，任何对象与String相加结果为String。String中也可以有转义字符，
如\n、\\、\'等。 </p><pre class="prettyprint"><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">" 'a\"b' "</span><span class="pun">);</span><span class="pln"> &nbsp; </span><span class="com">//字符串 a'b</span><span class="pln"><br></span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">" \"a\'b\" "</span><span class="pun">);</span><span class="pln"> &nbsp;</span><span class="com">//字符串 a"b</span><span class="pln"><br></span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">" 'hello'+3 "</span><span class="pun">);</span><span class="pln"> &nbsp;</span><span class="com">//字符串 hello 3</span><span class="pln"><br></span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">" 'hello '+ unknow "</span><span class="pun">);</span><span class="pln"> &nbsp;</span><span class="com">//字符串 hello null</span></pre><h2><a name="调用函数">调用函数</a><a href="#%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0" class="section_anchor">¶</a></h2><p>Aviator支持函数调用，函数调用的风格类似lua，下面的例子获取字符串的长度： </p><pre class="prettyprint"><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">"string.length('hello')"</span><span class="pun">);</span></pre><p>string.length('hello')是一个函数调用，string.length是一个函数,'hello'是调用的参数。 </p><p>再用string.substring来截取字符串： </p><pre class="prettyprint"><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">"string.contains(\"test\",string.substring('hello',1,2))"</span><span class="pun">);</span></pre><p>通过string.substring('hello',1,2)获取字符串'e'，然后通过函数string.contains判断e是否在'test'中。可以看到，函数可以嵌套调用。 </p><p>Aviator的内置函数列表请看后面。 </p><h3><a name="自定义函数">自定义函数</a><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0" class="section_anchor">¶</a></h3><p>Aviator除了内置的函数之外，还允许用户自定义函数，只要实现com.googlecode.aviator.runtime.type.AviatorFunction接口，并注册到AviatorEvaluator即可使用 </p><pre class="prettyprint"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">AviatorFunction</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="com">/**<br>&nbsp; &nbsp; &nbsp;* Get the function name<br>&nbsp; &nbsp; &nbsp;* <br>&nbsp; &nbsp; &nbsp;* @return<br>&nbsp; &nbsp; &nbsp;*/</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getName</span><span class="pun">();</span><span class="pln"><br><br><br>&nbsp; &nbsp; </span><span class="com">/**<br>&nbsp; &nbsp; &nbsp;* call function<br>&nbsp; &nbsp; &nbsp;* <br>&nbsp; &nbsp; &nbsp;* @param env<br>&nbsp; &nbsp; &nbsp;* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Variable environment<br>&nbsp; &nbsp; &nbsp;* @param args<br>&nbsp; &nbsp; &nbsp;* &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Function arguments<br>&nbsp; &nbsp; &nbsp;* @return<br>&nbsp; &nbsp; &nbsp;*/</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">AviatorObject</span><span class="pln"> call</span><span class="pun">(</span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;</span><span class="pln"> env</span><span class="pun">,</span><span class="pln"> </span><span class="typ">AviatorObject</span><span class="pun">...</span><span class="pln"> args</span><span class="pun">);</span><span class="pln"><br></span><span class="pun">}</span></pre><p>可以看一个例子，我们实现一个add函数来做数值的相加： </p><pre class="prettyprint"><span class="pln">&nbsp; </span><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">googlecode</span><span class="pun">.</span><span class="pln">aviator</span><span class="pun">.</span><span class="pln">runtime</span><span class="pun">.</span><span class="kwd">function</span><span class="pun">.</span><span class="typ">FunctionUtils</span><span class="pun">;</span><span class="pln"><br>&nbsp; </span><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">googlecode</span><span class="pun">.</span><span class="pln">aviator</span><span class="pun">.</span><span class="pln">runtime</span><span class="pun">.</span><span class="pln">type</span><span class="pun">.</span><span class="typ">AviatorDouble</span><span class="pun">;</span><span class="pln"><br>&nbsp; </span><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">googlecode</span><span class="pun">.</span><span class="pln">aviator</span><span class="pun">.</span><span class="pln">runtime</span><span class="pun">.</span><span class="pln">type</span><span class="pun">.</span><span class="typ">AviatorFunction</span><span class="pun">;</span><span class="pln"><br>&nbsp; </span><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">googlecode</span><span class="pun">.</span><span class="pln">aviator</span><span class="pun">.</span><span class="pln">runtime</span><span class="pun">.</span><span class="pln">type</span><span class="pun">.</span><span class="typ">AviatorObject</span><span class="pun">;</span><span class="pln"><br>&nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AddFunction</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">AviatorFunction</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">AviatorObject</span><span class="pln"> call</span><span class="pun">(</span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;</span><span class="pln"> env</span><span class="pun">,</span><span class="pln"> </span><span class="typ">AviatorObject</span><span class="pun">...</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">args</span><span class="pun">.</span><span class="pln">length </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">throw</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">IllegalArgumentException</span><span class="pun">(</span><span class="str">"Add only supports two arguments"</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Number</span><span class="pln"> left </span><span class="pun">=</span><span class="pln"> </span><span class="typ">FunctionUtils</span><span class="pun">.</span><span class="pln">getNumberValue</span><span class="pun">(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> args</span><span class="pun">,</span><span class="pln"> env</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Number</span><span class="pln"> right </span><span class="pun">=</span><span class="pln"> </span><span class="typ">FunctionUtils</span><span class="pun">.</span><span class="pln">getNumberValue</span><span class="pun">(</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> args</span><span class="pun">,</span><span class="pln"> env</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">AviatorDouble</span><span class="pun">(</span><span class="pln">left</span><span class="pun">.</span><span class="pln">doubleValue</span><span class="pun">()</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> right</span><span class="pun">.</span><span class="pln">doubleValue</span><span class="pun">());</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> getName</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"add"</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; </span><span class="pun">}</span></pre><p>注册到AviatorEvaluator并调用如下： </p><pre class="prettyprint"><span class="pln">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">//注册函数</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">addFunction</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">AddFunction</span><span class="pun">());</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">"add(1,2)"</span><span class="pun">));</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">"add(add(1,2),100)"</span><span class="pun">));</span></pre><p>注册函数通过AviatorEvaluator.addFunction方法，移除可以通过removeFunction。 </p><h2><a name="编译表达式">编译表达式</a><a href="#%E7%BC%96%E8%AF%91%E8%A1%A8%E8%BE%BE%E5%BC%8F" class="section_anchor">¶</a></h2><p>上面提到的例子都是直接执行表达式，事实上Aviator背后都帮你做了编译并执行的工作。你可以自己先编译表达式，返回一个编译的结果，然后传入不同的env来复用编译结果，提高性能，这是更推荐的使用方式： </p><pre class="prettyprint"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">HashMap</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Map</span><span class="pun">;</span><span class="pln"><br><br></span><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">googlecode</span><span class="pun">.</span><span class="pln">aviator</span><span class="pun">.</span><span class="typ">AviatorEvaluator</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">googlecode</span><span class="pun">.</span><span class="pln">aviator</span><span class="pun">.</span><span class="typ">Expression</span><span class="pun">;</span><span class="pln"><br><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">CompileExample</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">String</span><span class="pln"> expression </span><span class="pun">=</span><span class="pln"> </span><span class="str">"a-(b-c)&gt;100"</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">// 编译表达式</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Expression</span><span class="pln"> compiledExp </span><span class="pun">=</span><span class="pln"> </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">compile</span><span class="pun">(</span><span class="pln">expression</span><span class="pun">);</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;</span><span class="pln"> env </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; env</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"a"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">100.3</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; env</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"b"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">45</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; env</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"c"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">-</span><span class="lit">199.100</span><span class="pun">);</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="com">// 执行表达式</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Boolean</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Boolean</span><span class="pun">)</span><span class="pln"> compiledExp</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="pln">env</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">result</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span></pre><p>通
过compile方法可以将表达式编译成Expression的中间对象，当要执行表达式的时候传入env并调用Expression的execute方
法即可。表达式中使用了括号来强制优先级，这个例子还使用了&gt;用于比较数值大小，比较运算符!=、==、&gt;、&gt;=、&lt;、&
lt;=不仅可以用于数值，也可以用于String、Pattern、Boolean等等，甚至是任何用户传入的两个都实现了java.lang。
Comparable接口的对象之间。 </p><p>编译后的结果你可以自己缓存，也可以交给Aviator帮你缓存，AviatorEvaluator内部有一个全局的缓存池，如果你决定缓存编译结果，可以通过： </p><pre class="prettyprint"><span class="pln">&nbsp; &nbsp;</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="typ">Expression</span><span class="pln"> compile</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> expression</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> cached</span><span class="pun">)</span></pre><p>将cached设置为true即可，那么下次编译同一个表达式的时候将直接返回上一次编译的结果。使缓存失效通过： </p><pre class="prettyprint"><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> invalidateCache</span><span class="pun">(</span><span class="typ">String</span><span class="pln"> expression</span><span class="pun">)</span></pre><p>方法。 </p><h2><a name="访问数组和集合">访问数组和集合</a><a href="#%E8%AE%BF%E9%97%AE%E6%95%B0%E7%BB%84%E5%92%8C%E9%9B%86%E5%90%88" class="section_anchor">¶</a></h2><p>可以通过中括号去访问数组和java.util.List对象，可以通过map.key访问java.util.Map中key对应的value，一个例子： </p><pre class="prettyprint"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">ArrayList</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Date</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">HashMap</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">List</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Map</span><span class="pun">;</span><span class="pln"><br><br></span><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">googlecode</span><span class="pun">.</span><span class="pln">aviator</span><span class="pun">.</span><span class="typ">AviatorEvaluator</span><span class="pun">;</span><span class="pln"><br><br><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">CollectionExample</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">List</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;</span><span class="pln"> list </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArrayList</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">&gt;();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; list</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="str">"hello"</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; list</span><span class="pun">.</span><span class="pln">add</span><span class="pun">(</span><span class="str">" world"</span><span class="pun">);</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">final</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">[]</span><span class="pln"> array </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">[</span><span class="lit">3</span><span class="pun">];</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; array</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; array</span><span class="pun">[</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; array</span><span class="pun">[</span><span class="lit">2</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Date</span><span class="pun">&gt;</span><span class="pln"> map </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Date</span><span class="pun">&gt;();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; map</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"date"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Date</span><span class="pun">());</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;</span><span class="pln"> env </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; env</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"list"</span><span class="pun">,</span><span class="pln"> list</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; env</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"array"</span><span class="pun">,</span><span class="pln"> array</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; env</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"map"</span><span class="pun">,</span><span class="pln"> map</span><span class="pun">);</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="str">"list[0]+list[1]+'\narray[0]+array[1]+array[2]='+(array[0]+array[1]+array[2]) +' \ntoday is '+map.date "</span><span class="pun">,</span><span class="pln"> env</span><span class="pun">));</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span></pre><h2><a name="三元操作符">三元操作符</a><a href="#%E4%B8%89%E5%85%83%E6%93%8D%E4%BD%9C%E7%AC%A6" class="section_anchor">¶</a></h2><p>Aviator不提供if else语句，但是提供了三元操作符?:用于条件判断，使用上与java没有什么不同： </p><pre class="prettyprint"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">HashMap</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Map</span><span class="pun">;</span><span class="pln"><br><br></span><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">googlecode</span><span class="pun">.</span><span class="pln">aviator</span><span class="pun">.</span><span class="typ">AviatorEvaluator</span><span class="pun">;</span><span class="pln"><br><br><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">TernaryOperatorExample</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">args</span><span class="pun">.</span><span class="pln">length </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="pln">err</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="str">"Usage: java TernaryOperatorExample [number]"</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">exit</span><span class="pun">(</span><span class="lit">1</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">int</span><span class="pln"> num </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Integer</span><span class="pun">.</span><span class="pln">parseInt</span><span class="pun">(</span><span class="pln">args</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;</span><span class="pln"> env </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; env</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"a"</span><span class="pun">,</span><span class="pln"> num</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">String</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">String</span><span class="pun">)</span><span class="pln"> </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">"a&gt;0? 'yes':'no'"</span><span class="pun">,</span><span class="pln"> env</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">result</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span></pre><p>这个例子用来判断用户传入的数字是否是正整数，是的话打印yes。 </p><p>Aviator的三元表达式对于两个分支的结果类型并不要求一致，可以是任何类型，这一点与java不同。 </p><h2><a name="正则表达式匹配">正则表达式匹配</a><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D" class="section_anchor">¶</a></h2><p>Aviator支持类Ruby和Perl风格的表达式匹配运算，通过=~操作符，如下面这个例子匹配email并提取用户名返回： </p><pre class="prettyprint"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">HashMap</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Map</span><span class="pun">;</span><span class="pln"><br><br></span><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">googlecode</span><span class="pun">.</span><span class="pln">aviator</span><span class="pun">.</span><span class="typ">AviatorEvaluator</span><span class="pun">;</span><span class="pln"><br><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">RegularExpressionExample</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">String</span><span class="pln"> email </span><span class="pun">=</span><span class="pln"> </span><span class="str">"killme2008@gmail.com"</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;</span><span class="pln"> env </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; env</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"email"</span><span class="pun">,</span><span class="pln"> email</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">String</span><span class="pln"> username </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">String</span><span class="pun">)</span><span class="pln"> </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">"email=~/([\\w0-8]+@\\w+[\\.\\w+]+)/ ? $1:'unknow'"</span><span class="pun">,</span><span class="pln"> env</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">username</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span></pre><p>email
与正则表达式//(\\w0-8+@\\w+\\.\\w++)/通过=~操作符来匹配，结果为一个Boolean类型，因此可以用于三元表达式判断，匹
配成功的时候返回$1，指代正则表达式的分组1，也就是用户名，否则返回unknown。这个例子将打印killme2008这个用户名。 </p><p>Aviator
在表达式级别支持正则表达式，通过//括起来的字符序列构成一个正则表达式，正则表达式可以用于匹配（作为=~的右操作数)、比较大小，匹配仅能与字符串
进行匹配。匹配成功后，Aviator会自动将匹配成功的分组放入$num的变量中，其中$0指代整个匹配的字符串，而$1表示第一个分组，以此类推。 </p><p>Aviator的正则表达式规则跟Java完全一样，因为内部其实就是使用java.util.regex.Pattern做编译的。 </p><h2><a name="变量的语法糖衣">变量的语法糖衣</a><a href="#%E5%8F%98%E9%87%8F%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96%E8%A1%A3" class="section_anchor">¶</a></h2><p>Aviator
有个方便用户使用变量的语法糖衣，当你要访问变量a中的某个属性b，那么你可以通过a.b访问到，更进一步，a.b.c将访问变量a的b属性中的c属性
值，推广开来也就是说Aviator可以将变量声明为嵌套访问的形式，一个例子，Foo类有属性i、f、date： </p><pre class="prettyprint"><span class="pln">&nbsp;</span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Foo</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">float</span><span class="pln"> f</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Date</span><span class="pln"> date </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Date</span><span class="pun">();</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Foo</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">float</span><span class="pln"> f</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Date</span><span class="pln"> date</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">super</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">i </span><span class="pun">=</span><span class="pln"> i</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">f </span><span class="pun">=</span><span class="pln"> f</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">date </span><span class="pun">=</span><span class="pln"> date</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> getI</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">return</span><span class="pln"> i</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setI</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">i </span><span class="pun">=</span><span class="pln"> i</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">float</span><span class="pln"> getF</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">return</span><span class="pln"> f</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setF</span><span class="pun">(</span><span class="kwd">float</span><span class="pln"> f</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">f </span><span class="pun">=</span><span class="pln"> f</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="typ">Date</span><span class="pln"> getDate</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">return</span><span class="pln"> date</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> setDate</span><span class="pun">(</span><span class="typ">Date</span><span class="pln"> date</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">date </span><span class="pun">=</span><span class="pln"> date</span><span class="pun">;</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span></pre><p>Foo类符合JavaBean规范，并且是public的，我们执行一个表达式来描述Foo: </p><pre class="prettyprint"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Date</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">HashMap</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Map</span><span class="pun">;</span><span class="pln"><br><br></span><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">googlecode</span><span class="pun">.</span><span class="pln">aviator</span><span class="pun">.</span><span class="typ">AviatorEvaluator</span><span class="pun">;</span><span class="pln"><br><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">VariableExample</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Foo</span><span class="pln"> foo </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Foo</span><span class="pun">(</span><span class="lit">100</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3.14f</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Date</span><span class="pun">());</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;</span><span class="pln"> env </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; env</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"foo"</span><span class="pun">,</span><span class="pln"> foo</span><span class="pun">);</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">String</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">(</span><span class="typ">String</span><span class="pun">)</span><span class="pln"> </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="str">" '[foo i='+ foo.i + ' f='+foo.f+' year='+(foo.date.year+1900)+ ' month='+foo.date.month +']' "</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; env</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">result</span><span class="pun">);</span><span class="pln"><br><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br></span><span class="pun">}</span></pre><p>细看下表达式： </p><pre class="prettyprint"><span class="str">'[foo i='</span><span class="pun">+</span><span class="pln"> foo</span><span class="pun">.</span><span class="pln">i </span><span class="pun">+</span><span class="pln"> </span><span class="str">' f='</span><span class="pun">+</span><span class="pln">foo</span><span class="pun">.</span><span class="pln">f</span><span class="pun">+</span><span class="str">' year='</span><span class="pun">+(</span><span class="pln">foo</span><span class="pun">.</span><span class="pln">date</span><span class="pun">.</span><span class="pln">year</span><span class="pun">+</span><span class="lit">1900</span><span class="pun">)+</span><span class="pln"> </span><span class="str">' month='</span><span class="pun">+</span><span class="pln">foo</span><span class="pun">.</span><span class="pln">date</span><span class="pun">.</span><span class="pln">month </span><span class="pun">+</span><span class="str">']'</span></pre><p>可以看到我们通过foo.i和foo.f的方式来访问foo变量中的i和f属性，并且通过foo.date.year的方式来访问foo中date对象的year属性（其实是getYear方法）。 </p><h2><a name="nil对象">nil对象</a><a href="#nil%E5%AF%B9%E8%B1%A1" class="section_anchor">¶</a></h2><p>nil
是Aviator内置的常量，类似java中的null，表示空的值。nil跟null不同的在于，在java中null只能使用在==、!=的比较运算
符，而nil还可以使用&gt;、&gt;=、&lt;、&lt;=等比较运算符。Aviator规定，任何对象都比nil大除了nil本身。用户传入的
变量如果为null，将自动以nil替代。 </p><pre class="prettyprint"><span class="pln">&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">"nil == nil"</span><span class="pun">);</span><span class="pln"> &nbsp;</span><span class="com">//true</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">" 3&gt; nil"</span><span class="pun">);</span><span class="pln"> &nbsp; &nbsp;</span><span class="com">//true</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">" true!= nil"</span><span class="pun">);</span><span class="pln"> &nbsp; &nbsp;</span><span class="com">//true</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">" ' '&gt;nil "</span><span class="pun">);</span><span class="pln"> &nbsp;</span><span class="com">//true</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">" a==nil "</span><span class="pun">);</span><span class="pln"> &nbsp; </span><span class="com">//true,a is null</span></pre><p>nil与String相加的时候，跟java一样显示为null </p><h2><a name="日期比较">日期比较</a><a href="#%E6%97%A5%E6%9C%9F%E6%AF%94%E8%BE%83" class="section_anchor">¶</a></h2><p>Aviator并不支持日期类型，如果要比较日期，你需要将日期写字符串的形式，并且要求是形如"yyyy-MM-dd HH:mm:ss:SS"的字符串，否则都将报错。 字符串跟java.util.Date比较的时候将自动转换为Date对象进行比较： </p><pre class="prettyprint"><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">text</span><span class="pun">.</span><span class="typ">SimpleDateFormat</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Date</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">HashMap</span><span class="pun">;</span><span class="pln"><br></span><span class="kwd">import</span><span class="pln"> java</span><span class="pun">.</span><span class="pln">util</span><span class="pun">.</span><span class="typ">Map</span><span class="pun">;</span><span class="pln"><br><br></span><span class="kwd">import</span><span class="pln"> com</span><span class="pun">.</span><span class="pln">googlecode</span><span class="pun">.</span><span class="pln">aviator</span><span class="pun">.</span><span class="typ">AviatorEvaluator</span><span class="pun">;</span><span class="pln"><br><br><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">DateExample</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">static</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> main</span><span class="pun">(</span><span class="typ">String</span><span class="pun">[]</span><span class="pln"> args</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">throws</span><span class="pln"> </span><span class="typ">Exception</span><span class="pln"> </span><span class="pun">{</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Map</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;</span><span class="pln"> env </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HashMap</span><span class="pun">&lt;</span><span class="typ">String</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">&gt;();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="kwd">final</span><span class="pln"> </span><span class="typ">Date</span><span class="pln"> date </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Date</span><span class="pun">();</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">String</span><span class="pln"> dateStr </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">SimpleDateFormat</span><span class="pun">(</span><span class="str">"yyyy-MM-dd HH:mm:ss:SS"</span><span class="pun">).</span><span class="pln">format</span><span class="pun">(</span><span class="pln">date</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; env</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"date"</span><span class="pun">,</span><span class="pln"> date</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; env</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="str">"dateStr"</span><span class="pun">,</span><span class="pln"> dateStr</span><span class="pun">);</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">Boolean</span><span class="pln"> result </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Boolean</span><span class="pun">)</span><span class="pln"> </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">"date==dateStr"</span><span class="pun">,</span><span class="pln"> env</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">result</span><span class="pun">);</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; result </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Boolean</span><span class="pun">)</span><span class="pln"> </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">"date &gt; '2009-12-20 00:00:00:00' "</span><span class="pun">,</span><span class="pln"> env</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">result</span><span class="pun">);</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; result </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Boolean</span><span class="pun">)</span><span class="pln"> </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">"date &lt; '2200-12-20 00:00:00:00' "</span><span class="pun">,</span><span class="pln"> env</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">result</span><span class="pun">);</span><span class="pln"><br><br>&nbsp; &nbsp; &nbsp; &nbsp; result </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="typ">Boolean</span><span class="pun">)</span><span class="pln"> </span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">execute</span><span class="pun">(</span><span class="str">"date ==date "</span><span class="pun">,</span><span class="pln"> env</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">System</span><span class="pun">.</span><span class="kwd">out</span><span class="pun">.</span><span class="pln">println</span><span class="pun">(</span><span class="pln">result</span><span class="pun">);</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">}</span><span class="pln"><br><br></span><span class="pun">}</span></pre><p>也就是说String除了能跟String比较之外，还能跟nil和date字符串比较。 </p><h2><a name="两种模式">两种模式</a><a href="#%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F" class="section_anchor">¶</a></h2><p>默认AviatorEvaluator以编译速度优先： </p><pre class="prettyprint"><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">setOptimize</span><span class="pun">(</span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">COMPILE</span><span class="pun">);</span></pre><p>你可以修改为运行速度优先，这会做更多的编译优化： </p><pre class="prettyprint"><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">setOptimize</span><span class="pun">(</span><span class="typ">AviatorEvaluator</span><span class="pun">.</span><span class="pln">EVAL</span><span class="pun">);</span></pre><h2><a name="语法手册">语法手册</a><a href="#%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C" class="section_anchor">¶</a></h2><p>下面是Aviator详细的语法规则定义。 </p><h3><a name="数据类型">数据类型</a><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" class="section_anchor">¶</a></h3><ul><li>Number类型：数字类型，支持两种类型，分别对应Java的Long和Double，也就是说任何整数都将被转换为Long，而任何浮点数都将被转换为Double，包括用户传入的数值也是如此转换。不支持科学计数法，仅支持十进制。如-1、100、2.3等。 </li></ul><ul><li>String类型：  字符串类型，单引号或者双引号括起来的文本串，如'hello world'，变量如果传入的是String或者Character也将转为String类型。 </li></ul><ul><li>Bool类型：    常量true和false，表示真值和假值，与java的Boolean.TRUE和Boolean.False对应。 </li></ul><ul><li>Pattern类型： 类似Ruby、perl的正则表达式，以//括起来的字符串，如/\d+/，内部实现为java.util.Pattern。 </li></ul><ul><li>变量类型：   与Java的变量命名规则相同，变量的值由用户传入，如"a"、"<i>b"等 </i></li></ul><ul><li><i>nil
类型:     
常量nil,类似java中的null，但是nil比较特殊，nil不仅可以参与==、!=的比较，也可以参与&gt;、&gt;=、&lt;、&
lt;=的比较，Aviator规定任何类型都n大于nil除了nil本身，nil==nil返回true。用户传入的变量值如果为null，那么也将作
为nil处理，nil打印为null。 </i></li></ul><h3><i><a name="操作符">操作符</a><a href="#%E6%93%8D%E4%BD%9C%E7%AC%A6" class="section_anchor">¶</a></i></h3><h4><i><a name="算术运算符">算术运算符</a><a href="#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6" class="section_anchor">¶</a></i></h4><p><i>Aviator支持常见的算术运算符，包括+   -  <tt>*</tt>  /  % 五个二元运算符，和一元运算符"-"。其中 - <tt>*</tt> /  %和一元的"-"仅能作用于Number类型。 </i></p><p>"+"不仅能用于Number类型，还可以用于String的相加，或者字符串与其他对象的相加。Aviator规定，任何类型与String相加，结果为String。 </p><h4><a name="逻辑运算符">逻辑运算符</a><a href="#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6" class="section_anchor">¶</a></h4><p>Avaitor的支持的逻辑运算符包括，一元否定运算符"!"，以及逻辑与的"&amp;&amp;"，逻辑或的"||"。逻辑运算符的操作数只能为Boolean。 </p><h4><a name="关系运算符">关系运算符</a><a href="#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6" class="section_anchor">¶</a></h4><p>Aviator支持的关系运算符包括"&lt;"  "&lt;="  "&gt;"  "&gt;="  以及"=="和"!=" 。 </p><p>&amp;&amp;和||都执行短路规则。 </p><p>关系运算符可以作用于Number之间、String之间、Pattern之间、Boolean之间、变量之间以及其他类型与nil之间的关系比较，不同类型除了nil之外不能相互比较。 </p><p>Aviator规定任何对象都比nil大除了nil之外。 </p><h4><a name="匹配运算符">匹配运算符</a><a href="#%E5%8C%B9%E9%85%8D%E8%BF%90%E7%AE%97%E7%AC%A6" class="section_anchor">¶</a></h4><p>匹配运算符"=~"用于String和Pattern的匹配，它的左操作数必须为String，右操作数必须为Pattern。匹配成功后，Pattern的分组将存于变量$num，num为分组索引。 </p><h4><a name="三元运算符">三元运算符</a><a href="#%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6" class="section_anchor">¶</a></h4><p>Aviator
没有提供if else语句，但是提供了三元运算符 "?:"，形式为 bool ? exp1: exp2。 
其中bool必须为结果为Boolean类型的表达式，而exp1和exp2可以为任何合法的Aviator表达式，并且不要求exp1和exp2返回的
结果类型一致。 </p><h3><a name="操作符列表">操作符列表</a><a href="#%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%88%97%E8%A1%A8" class="section_anchor">¶</a></h3><p>Aviator支持操作符的优先级，并且允许通过括号来强制优先级，下面是完整的操作符列表，按照优先级从高到低的顺序排列： </p><p></p><table><tbody><tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 序号 </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 操作符 </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 结合性 </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 操作数限制 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 0    </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> () <tt>[</tt> <tt>]</tt>  </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 从左到右 </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> ()用于函数调用，<tt>[</tt> <tt>]</tt>用于数组和java.util.List的元素访问，要求<tt>[</tt>indx<tt>]</tt>中的index必须为整型 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 1    </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> ! -    </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 从右到左  </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> ! 能用于Boolean,- 仅能用于Number </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 2    </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> <tt>*</tt> / %  </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 从左到右  </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> Number之间 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 3    </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> + -    </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 从左到右  </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> + - 都能用于Number之间, + 还能用于String之间，或者String和其他对象 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 4    </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> &lt;   &lt;=   &gt;   &gt;= </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">  从左到右 </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> Number之间、String之间、Pattern之间、变量之间、其他类型与nil之间 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">5     </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">  ==   !=  =~ </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 从左到右  </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> ==和!=作用于Number之间、String之间、Pattern之间、变量之间、其他类型与nil之间以及String和java.util.Date之间，=~仅能作用于String和Pattern之间 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">6     </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">   &amp;&amp;   </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 从左到右  </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">  Boolean之间，短路 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">7     </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">   <tt>|</tt><tt>|</tt>   </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 从左到右  </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">  Boolean之间，短路 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 8    </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">  ? :   </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 从右到左  </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">  第一个操作数的结果必须为Boolean，第二和第三操作数结果无限制 </td></tr> </tbody></table><h3><a name="类型转换规则">类型转换规则</a><a href="#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E8%A7%84%E5%88%99" class="section_anchor">¶</a></h3><ul><li>Java的byte short int long都转化为Long类型，Java的float,double都将转化为Double类型。Java的char String都将转化为String。Java的null都将转为nil。 </li></ul><ul><li>当两个操作符都是Double或者都是Long的时候，各自按照Double或者Long的类型执行 </li></ul><ul><li>当两个操作符中某一个是Double的时候，另一个操作数也将转换成Double，按照Double类型执行。 </li></ul><ul><li>任何类型与String相加，结果为String </li></ul><ul><li>任何类型都比nil大，除了nil本身。 </li></ul><ul><li>nil在打印或者与字符串相加的时候，显示为null </li></ul><ul><li>形如"yyyy-MM-dd HH:mm:ss:SS"的字符串，在与java.util.Date做比较的时候将尝试转换成java.util.Date对象比较。 </li></ul><p>  </p><ul><li>没有规定的类型转换操作，除了未知的变量类型之间，都将抛出异常。 </li></ul><h3><a name="常量和变量">常量和变量</a><a href="#%E5%B8%B8%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F" class="section_anchor">¶</a></h3><p></p><table><tbody><tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> true </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">  真值 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> false </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 假值  </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> nil   </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 空值 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> $digit </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 正则表达式匹配成功后的分组，$0表示匹配的字符串，$1表示第一个分组 etc. </td></tr> </tbody></table><h3><a name="内置函数">内置函数</a><a href="#%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0" class="section_anchor">¶</a></h3><p></p><table><tbody><tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 函数名称 </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 说明 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> sysdate()              </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">返回当前日期对象java.util.Date </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> rand()                 </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 返回一个介于0-1的随机数，double类型 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> print(<tt>[</tt>out<tt>]</tt>,obj)       </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 打印对象，如果指定out，向out打印，否则输出到控制台</td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> println(<tt>[</tt>out<tt>]</tt>,obj)     </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 与print类似，但是在输出后换行 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> now()                  </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 返回System.currentTimeMillis  </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> string.contains(s1,s2) </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 判断s1是否包含s2，返回Boolean </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> string.length(s)       </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 求字符串长度,返回Long </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> string.startsWith(s1,s2)  </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> s1是否以s2开始，返回Boolean </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> string.endsWith(s1,s2)   </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> s1是否以s2结尾,返回Boolean </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> string.substring(s,begin<tt>[</tt>,end<tt>]</tt>) </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 截取字符串s，从begin到end，end如果忽略的话，将从begin到结尾，与java.util.String.substring一样。 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> math.abs(d)            </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 求d的绝对值 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> math.sqrt(d)           </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 求d的平方根 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> math.pow(d1,d2)        </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 求d1的d2次方 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> math.log(d)            </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 求d的自然对数 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> math.log10(d)          </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;">求d以10为底的对数 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> math.sin(d)            </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 正弦函数 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> math.cos(d)            </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 余弦函数 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> math.tan(d)            </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 正切函数 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> map(seq,fun)           </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 将函数fun作用到集合seq每个元素上，返回新元素组成的集合 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> filter(seq,predicate)  </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 将谓词predicate作用在集合的每个元素上，返回谓词为true的元素组成的集合</td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> count(seq)             </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 返回集合大小 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> include(seq,element)   </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 判断element是否在集合seq中，返回boolean值 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> sort(seq)              </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 排序集合，仅对数组和List有效，返回排序后的新集合 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> reduce(seq,fun,init)   </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> fun接收两个参数，第一个是集合元素，第二个是累积的init，本函数用于将fun作用在集合每个元素和初始值上面，返回最终的init值</td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> seq.eq(value)          </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 返回一个谓词，用来判断传入的参数是否跟value相等,用于filter函数，如filter(seq,seq.eq(3)) 过滤返回等于3的元素组成的集合 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> seq.neq(value)         </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 与seq.eq类似，返回判断不等于的谓词 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> seq.gt(value)          </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 返回判断大于value的谓词 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> seq.ge(value)          </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 返回判断大于等于value的谓词 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> seq.lt(value)          </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 返回判断小于value的谓词 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> seq.le(value)          </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 返回判断小于等于value的谓词 </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> seq.nil()              </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 返回判断是否为nil的谓词  </td></tr> <tr><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> seq.exists()           </td><td style="border: 1px solid rgb(170, 170, 170); padding: 5px;"> 返回判断不为nil的谓词    </td></tr> </tbody></table>
 </td> 
 </tr>
 </tbody></table>
 </div>


 
 
 
 
 
 <div id="commentform">
 <form action="../w/detail.do" method="post">
 <table>
 <tbody><tr><td class="vt">
 <input name="pagename" value="User_Guide_zh" type="hidden">
 <input name="token" value="b59a9e34d855a1603a9302c41963759e" type="hidden">
 <div>Enter a comment:</div>
 <textarea name="content" rows="6" cols="80"></textarea><br><br>
 <input name="submit" value="Submit" type="submit">
 </td>
 <td class="vt">
 <div id="whb" class="tip" style="width: 15em;">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner closed" id="entrybubble">
 <a class="ifClosed" href="#whb" style="float: right;" onclick="_toggleHidden(this); document.getElementById('wikihelp').value='opened'">show</a>
 <a class="ifOpened" href="#whb" style="float: right;" onclick="_toggleHidden(this); document.getElementById('wikihelp').value='closed'">hide</a>
 <b>Wiki markup help</b>
 <div class="ifOpened">
 <div style="padding: 2px; font-size: 96%;">
 =Heading1=<br>
 ==Heading2==<br>
 ===Heading3===<br>
 <br>
 *bold* &nbsp; &nbsp;
 _italic_<br>
 `inline code`<br>
 escape: `*`<br>
 <br>
 Indent lists 2 spaces:<br>
 &nbsp;&nbsp;* bullet item<br>
 &nbsp;&nbsp;# numbered list<br>
 <br>
 {{{<br>
 verbatim code block<br>
 }}}<br>
 <br>
 Horizontal rule<br>
 ----
 <br>
 <br>
 WikiWordLink<br>
 [http://domain/page&nbsp;label]<br>
 http://domain/page<br>
 <br>
 || table || cells ||<br>
 
 </div><br>
 <a href="http://code.google.com/p/support/wiki/WikiSyntax" target="new">More
 examples</a>
 <a href="http://code.google.com/p/support/wiki/WikiSyntax" target="new"><img src="User_Guide_zh_files/tearoff_icon.gif" width="16" height="16"></a>
 </div>
 </div>
 <div class="round1"></div>
 <div class="round2"></div>
 <div class="round4"></div>
</div>
<input name="wikihelp" id="wikihelp" value="closed" type="hidden">

 </td></tr>
 </tbody></table>
 </form>
 </div>
 
 
 

<form name="delcom" action="../w/delComment.do" method="POST">
 <input name="sequence_num" value="" type="hidden">
 <input name="create_time" value="" type="hidden">
 <input name="mode" value="" type="hidden">
 <input name="pagename" value="User_Guide_zh" type="hidden">
 <input name="token" value="b59a9e34d855a1603a9302c41963759e" type="hidden">
</form>



 <script src="User_Guide_zh_files/prettify.js"></script>
 <script type="text/javascript">
 prettyPrint();
 </script>

<script type="text/javascript" src="User_Guide_zh_files/dit_scripts.js"></script>



  
 
 <script type="text/javascript" src="User_Guide_zh_files/core_scripts_20081103.js"></script>
 <script type="text/javascript" src="User_Guide_zh_files/codesite_product_dictionary_ph.js"></script>
 </div>
<div id="footer" dir="ltr">
 
 <div class="text">
 
 ©2010 Google -
 <a href="http://code.google.com/projecthosting/terms.html">Terms</a> -
 <a href="http://www.google.com/privacy.html">Privacy</a> -
 <a href="http://code.google.com/p/support/">Project Hosting Help</a>
 
 </div>
</div>

 <div class="hostedBy" style="margin-top: -20px;">
 <span style="vertical-align: top;">Powered by <a href="http://code.google.com/projecthosting/">Google Project Hosting</a></span>
 </div>
 
 


 
 <div style="display: none;" id="menuDiv-projects-dropdown" class="menuDiv instance0"><div class="menuCategory controls"><hr class="menuSeparator"><a href="http://code.google.com/more/" style="display: block;" class="menuItem">Find developer products...</a><a href="http://code.google.com/hosting/" style="display: block;" class="menuItem">Find open source projects...</a></div></div></body></html>