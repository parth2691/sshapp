SET CLUSTER '';
SET DEFAULT_TABLE_TYPE 0;
SET WRITE_DELAY 500;
SET DEFAULT_LOCK_TIMEOUT 2000;
SET CACHE_SIZE 16384;
CREATE USER IF NOT EXISTS SA SALT '7bc77091c211892a' HASH '8585f11bda2fc8a5f3ef48da4dcb289222f5290e5663191f7f152825eb9f60f8' ADMIN;
CREATE CACHED TABLE PUBLIC.QRTZ_CALENDARS(
    CALENDAR_NAME VARCHAR(200) NOT NULL,
    CALENDAR IMAGE NOT NULL
);
ALTER TABLE PUBLIC.QRTZ_CALENDARS ADD CONSTRAINT PUBLIC.PK_QRTZ_CALENDARS PRIMARY KEY(CALENDAR_NAME);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_CALENDARS;
CREATE CACHED TABLE PUBLIC.QRTZ_CRON_TRIGGERS(
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    CRON_EXPRESSION VARCHAR(120) NOT NULL,
    TIME_ZONE_ID VARCHAR(80)
);
ALTER TABLE PUBLIC.QRTZ_CRON_TRIGGERS ADD CONSTRAINT PUBLIC.PK_QRTZ_CRON_TRIGGERS PRIMARY KEY(TRIGGER_NAME, TRIGGER_GROUP);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_CRON_TRIGGERS;
CREATE CACHED TABLE PUBLIC.QRTZ_FIRED_TRIGGERS(
    ENTRY_ID VARCHAR(95) NOT NULL,
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    IS_VOLATILE BOOLEAN NOT NULL,
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    FIRED_TIME BIGINT NOT NULL,
    PRIORITY INTEGER NOT NULL,
    STATE VARCHAR(16) NOT NULL,
    JOB_NAME VARCHAR(200),
    JOB_GROUP VARCHAR(200),
    IS_STATEFUL BOOLEAN,
    REQUESTS_RECOVERY BOOLEAN
);
ALTER TABLE PUBLIC.QRTZ_FIRED_TRIGGERS ADD CONSTRAINT PUBLIC.PK_QRTZ_FIRED_TRIGGERS PRIMARY KEY(ENTRY_ID);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_FIRED_TRIGGERS;
CREATE CACHED TABLE PUBLIC.QRTZ_PAUSED_TRIGGER_GRPS(
    TRIGGER_GROUP VARCHAR(200) NOT NULL
);
ALTER TABLE PUBLIC.QRTZ_PAUSED_TRIGGER_GRPS ADD CONSTRAINT PUBLIC.PK_QRTZ_PAUSED_TRIGGER_GRPS PRIMARY KEY(TRIGGER_GROUP);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_PAUSED_TRIGGER_GRPS;
CREATE CACHED TABLE PUBLIC.QRTZ_SCHEDULER_STATE(
    INSTANCE_NAME VARCHAR(200) NOT NULL,
    LAST_CHECKIN_TIME BIGINT NOT NULL,
    CHECKIN_INTERVAL BIGINT NOT NULL
);
ALTER TABLE PUBLIC.QRTZ_SCHEDULER_STATE ADD CONSTRAINT PUBLIC.PK_QRTZ_SCHEDULER_STATE PRIMARY KEY(INSTANCE_NAME);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_SCHEDULER_STATE;
CREATE CACHED TABLE PUBLIC.QRTZ_LOCKS(
    LOCK_NAME VARCHAR(40) NOT NULL
);
ALTER TABLE PUBLIC.QRTZ_LOCKS ADD CONSTRAINT PUBLIC.PK_QRTZ_LOCKS PRIMARY KEY(LOCK_NAME);
-- 5 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_LOCKS;
INSERT INTO PUBLIC.QRTZ_LOCKS(LOCK_NAME) VALUES
('TRIGGER_ACCESS'),
('JOB_ACCESS'),
('CALENDAR_ACCESS'),
('STATE_ACCESS'),
('MISFIRE_ACCESS');
CREATE CACHED TABLE PUBLIC.QRTZ_JOB_DETAILS(
    JOB_NAME VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    DESCRIPTION VARCHAR(250),
    JOB_CLASS_NAME VARCHAR(250) NOT NULL,
    IS_DURABLE BOOLEAN NOT NULL,
    IS_VOLATILE BOOLEAN NOT NULL,
    IS_STATEFUL BOOLEAN NOT NULL,
    REQUESTS_RECOVERY BOOLEAN NOT NULL,
    JOB_DATA IMAGE
);
ALTER TABLE PUBLIC.QRTZ_JOB_DETAILS ADD CONSTRAINT PUBLIC.PK_QRTZ_JOB_DETAILS PRIMARY KEY(JOB_NAME, JOB_GROUP);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_JOB_DETAILS;
CREATE CACHED TABLE PUBLIC.QRTZ_JOB_LISTENERS(
    JOB_NAME VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    JOB_LISTENER VARCHAR(200) NOT NULL
);
ALTER TABLE PUBLIC.QRTZ_JOB_LISTENERS ADD CONSTRAINT PUBLIC.PK_QRTZ_JOB_LISTENERS PRIMARY KEY(JOB_NAME, JOB_GROUP, JOB_LISTENER);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_JOB_LISTENERS;
CREATE CACHED TABLE PUBLIC.QRTZ_SIMPLE_TRIGGERS(
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    REPEAT_COUNT BIGINT NOT NULL,
    REPEAT_INTERVAL BIGINT NOT NULL,
    TIMES_TRIGGERED BIGINT NOT NULL
);
ALTER TABLE PUBLIC.QRTZ_SIMPLE_TRIGGERS ADD CONSTRAINT PUBLIC.PK_QRTZ_SIMPLE_TRIGGERS PRIMARY KEY(TRIGGER_NAME, TRIGGER_GROUP);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_SIMPLE_TRIGGERS;
CREATE CACHED TABLE PUBLIC.QRTZ_BLOB_TRIGGERS(
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    BLOB_DATA IMAGE
);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_BLOB_TRIGGERS;
CREATE CACHED TABLE PUBLIC.QRTZ_TRIGGER_LISTENERS(
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    TRIGGER_LISTENER VARCHAR(200) NOT NULL
);
ALTER TABLE PUBLIC.QRTZ_TRIGGER_LISTENERS ADD CONSTRAINT PUBLIC.PK_QRTZ_TRIGGER_LISTENERS PRIMARY KEY(TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_LISTENER);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_TRIGGER_LISTENERS;
CREATE CACHED TABLE PUBLIC.QRTZ_TRIGGERS(
    TRIGGER_NAME VARCHAR(200) NOT NULL,
    TRIGGER_GROUP VARCHAR(200) NOT NULL,
    JOB_NAME VARCHAR(200) NOT NULL,
    JOB_GROUP VARCHAR(200) NOT NULL,
    IS_VOLATILE BOOLEAN NOT NULL,
    DESCRIPTION VARCHAR(250),
    NEXT_FIRE_TIME BIGINT,
    PREV_FIRE_TIME BIGINT,
    PRIORITY INTEGER,
    TRIGGER_STATE VARCHAR(16) NOT NULL,
    TRIGGER_TYPE VARCHAR(8) NOT NULL,
    START_TIME BIGINT NOT NULL,
    END_TIME BIGINT,
    CALENDAR_NAME VARCHAR(200),
    MISFIRE_INSTR SMALLINT,
    JOB_DATA IMAGE
);
ALTER TABLE PUBLIC.QRTZ_TRIGGERS ADD CONSTRAINT PUBLIC.PK_QRTZ_TRIGGERS PRIMARY KEY(TRIGGER_NAME, TRIGGER_GROUP);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.QRTZ_TRIGGERS;
ALTER TABLE PUBLIC.QRTZ_SIMPLE_TRIGGERS ADD CONSTRAINT PUBLIC.FK_QRTZ_SIMPLE_TRIGGERS_QRTZ_TRIGGERS FOREIGN KEY(TRIGGER_NAME, TRIGGER_GROUP) REFERENCES PUBLIC.QRTZ_TRIGGERS(TRIGGER_NAME, TRIGGER_GROUP) ON DELETE CASCADE NOCHECK;
ALTER TABLE PUBLIC.QRTZ_TRIGGERS ADD CONSTRAINT PUBLIC.FK_QRTZ_TRIGGERS_QRTZ_JOB_DETAILS FOREIGN KEY(JOB_NAME, JOB_GROUP) REFERENCES PUBLIC.QRTZ_JOB_DETAILS(JOB_NAME, JOB_GROUP) NOCHECK;
ALTER TABLE PUBLIC.QRTZ_JOB_LISTENERS ADD CONSTRAINT PUBLIC.FK_QRTZ_JOB_LISTENERS_QRTZ_JOB_DETAILS FOREIGN KEY(JOB_NAME, JOB_GROUP) REFERENCES PUBLIC.QRTZ_JOB_DETAILS(JOB_NAME, JOB_GROUP) ON DELETE CASCADE NOCHECK;
ALTER TABLE PUBLIC.QRTZ_TRIGGER_LISTENERS ADD CONSTRAINT PUBLIC.FK_QRTZ_TRIGGER_LISTENERS_QRTZ_TRIGGERS FOREIGN KEY(TRIGGER_NAME, TRIGGER_GROUP) REFERENCES PUBLIC.QRTZ_TRIGGERS(TRIGGER_NAME, TRIGGER_GROUP) ON DELETE CASCADE NOCHECK;
ALTER TABLE PUBLIC.QRTZ_CRON_TRIGGERS ADD CONSTRAINT PUBLIC.FK_QRTZ_CRON_TRIGGERS_QRTZ_TRIGGERS FOREIGN KEY(TRIGGER_NAME, TRIGGER_GROUP) REFERENCES PUBLIC.QRTZ_TRIGGERS(TRIGGER_NAME, TRIGGER_GROUP) ON DELETE CASCADE NOCHECK;
