hibernate reference
====================

2011.07.16
----------

1. Criteria查询 --- 结果集Distinct解决方案1 / 2

相信大家都很喜欢Criteria查询，因为它对查询条件已经查询实体采用松散的组合，不像HQL那样需要拼字符串。
但是又会比较抵触它，因为对它的不熟悉，写复杂查询可能会不顺手，一个子查询也可能会很麻烦。

今天我用半天时间与大家分享Criteria查询里面弯路比较多的结果集distinct，这个在HQL里面很简单，但在Criteria查询还真是头疼，
网上的文章也是很模糊而且讨论的比较片面，我希望通过这篇文章让大家少走弯路，多用Criteria查询，少用HQL拼字符串。呵呵。
Criteria的结果集最常用分两种：对象List、List<Object[]>（投影查询），这两种查询结果的distinct处理的方式也是不一样的。稍后会分别讨论。

本文用到模型类：
Device.java
====================================
Java代码  收藏代码

    @Entity  
    @Table(name = "DEVICE")  
    public class Device extends Maintainable {  
      
        private Long id;  
      
        private String name;  
      
        private NodeCabinet nodeCabinet;// 所属机柜  
      
        // setter getter method ...   
    }  


1. 基本知识：

1.1 Criteria不支持distinct对象结果集吗？
re: Criteria通过setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY)方法对查询后结果进行排重，请注意，这种方式是先查询出可能重复的记录然后根据每个对象的equals方法进行排重，如果不需要分页，而且你的查询结果集很小的话，可以使用这种方式distinct结果集。
warning:

    1. 要排重的对象要实现equals方法。
    2. 不能进行分页处理，因为是先查询后distinct，结果会不准确。
    3. 查询处理的结果集太大的话，可能存在性能问题，相同记录会查询多次。 



示例代码 1-1：
Java代码  收藏代码

    Criteria c = manager.createCriteria(Device.class);  
    .....  
    criteria.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY)  
    List result = c.list();  



1.2 Criteria如何进行投影查询我需要的几个字段?
re：Criteria通过设置projectionList就可以只查询指定字段。
warning：Criteria投影查询出来的结果集格式是这样的：List<Object[]> 前台遍历集合的时候需要使用数组下标访问数据。

示例代码 1-2：
Java代码  收藏代码

    Criteria c = manager.createCriteria(Device.class);  
    .....  
    ProjectionList projectionList = Projections.projectionList();  
    projectionList.add(Projections.property("id"));  
    projectionList.add(Projections.property("name"));  
    c.setProjection(projectionList); //生成如下SQL: select id, name from ....  
    List result = c.list();  




2. Criteria投影distinct查询

2.1 Criteria投影distinct查询
Criteria对投影的支持比返回对象的方式支持的好很多。以下是样例代码，与比示例1-2代码只有一行差别：

示例代码 2-1：
Java代码  收藏代码

    Criteria c = manager.createCriteria(Device.class);  
    .....  
    ProjectionList projectionList = Projections.projectionList();  
    projectionList.add(Projections.property("id"));  
    projectionList.add(Projections.property("name"));  
    c.setProjection(Projections.distinct(projectionList));  // >>>> 这里差别 生成如下SQL: select distinct id, name from ....  
    List result = c.list();  



2.2 分页情况下Criteria查询如何计算total records count
投影情况下如何计算distinct后分页total records count?
re：Criteria通过Projection计算count。先算count然后在投影。计算count的可以封装到单独查询方法里。

示例代码：
Java代码  收藏代码

    Criteria c = manager.createCriteria(Device.class);  
    .....  
    criteria.setProjection(Projections.countDistinct("id")); // select count(distcint id) from ...  
    Integer totalCount = (Integer) criteria.uniqueResult();   
      
    ProjectionList projectionList = Projections.projectionList();  
    projectionList.add(Projections.property("id"));  
    projectionList.add(Projections.property("name"));  
    c.setProjection(Projections.distinct(projectionList));  // 生成如下SQL: select distinct id, name from ....  
    List result = c.list();  
    
Criteria查询 --- 结果集Distinct解决方案2 / 2


这篇文章是上一篇的续, 主要讲述如何使用Criteria查询distinct后的结果集.

实体：
 
Java代码  收藏代码

    public class Authority {     
        
        private Long id;     
        
        private String name;     
          
        // setter getter method ...      
    }    
      
      
    public class User {     
        
        private Long id;     
        
        private String name;     
        
        private Set<AuthorityUserRelation> authorityUserRelation;  
          
        // setter getter method ...      
    }    
      
    public class AuthorityUserRelation {  
      
        private User user;  
      
        private Authority authority;  
    }  


权限Authority实体与用户User实体是ManyToMany单向关系,所有通过查询Authority可以找到多个User对象, 但我们希望distinct结果集。下面我们通过Criteria 完成这个distinct查询。

输入字符串"readOnly" 作为权限名称模糊查询条件, 匹配的用户

示例代码：
Java代码  收藏代码

    Criteria c = manager.createCriteria(User.class, "user");  
      
    DetachedCriteria dc = DetachedCriteria  
            .forClass(AuthorityUserRelation.class, "r")  
            .add(Restrictions.eqProperty("user.id", "r.user.id"))  
            .setProjection(Projections.id());  
      
    dc.createCriteria("r.authority", "a");  
    dc.add(Restrictions.ilike("a.name", "readOnly"));  
      
    c.add(Subqueries.exists(dc));  
      
    List result = c.list();  



distinct对象结果集的基本思想就是子查询，子查询根据输入条件查询distinct后对象id，外层内存id查询对象。

warning： 外层查询需要指定alias(本例为"user") , 否则会出现throw new MappingException


编后想: 其实有时候我们只需要模型的单独几个属性, 不需要把所有字段都拽出来，这时候可以用投影，但是投影又是基于数组的访问。不知道什么时候hibernate可以把投影查询的字段映射到模型中，没有查询出来的字段为null。这样做列表就会很轻松了：）

结束了, 欢迎讨论指正。转载请保留作者笔名Heipark

参考资料： http://floledermann.blogspot.com/2007/10/solving-hibernate-criterias-distinct.html 
    
    
2010.09.19
----------

1. 关联

--多对多，采用中间表，参看User
    //多对多定义
    @ManyToMany
    //中间表定义,表名采用默认命名规则
    @JoinTable(name = "T_USER_ROLE", joinColumns =  {
        @JoinColumn(name = "USER_ID")
    }
    , inverseJoinColumns =  {
        @JoinColumn(name = "ROLE_ID")
    }
    )
    //Fecth策略定义
    @Fetch(FetchMode.SUBSELECT)
    //集合按id排序
    @OrderBy("id ASC")
    public List<Role> getRoleList() {
        return roleList;
    }

--一对多，一般是业务表引用字典表 或 住明细表，参看Subject,Reply


2010.09.18
----------

1. 双向的一对多关系 Bidirectional one-to-many
   p283
   --还不是很明白
   childen 中定义
   <many-to-one name="parent" column="parent_id" not-null="true"/>

你还需要为类 Child 添加 parent 属性。
现在实体 Child 在管理连接的状态，为了使 collection 不更新连接，我们使用 inverse 属性：
<set name="children" inverse="true">
    <key column="parent_id"/>
    <one-to-many class="Child"/>

2. p289
inverse:
   默认inverse=false 
   mapedBy="xxxx" 
   相当于inverse=true

2010.09.16
----------

1. 抓取策略 fetching strategy
   p257

2010.09.15
----------

1. 参看 ContactDao
   有空了解下 Subqueries， Property 带的 gt,geAll....

2. // 16.9. 根据自然标识查询（Queries by natural identifier）

3. p236

2010.09.12
-----------

1. p230
   参看ContactDao

2. p233

2010.09.11
-----------

1. p 228
   Criteria
   
   结合项目，测试hibernate criteria 功能
   http://localhost:8090/sshapp/index2.jsp
   book/getBookByTitle

2010.09.05
----------

1. Criteria

List cats = sess.createCriteria(Cat.class)
        .add(  Restrictions.sqlRestriction("lower({alias}.name)  like  lower(?)",  "Fritz
%", Hibernate.STRING) )
    .list();
{alias} 占位符应当被替换为被查询实体的列别名。

Property age = Property.forName("age");
List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.disjunction()
        .add( age.isNull() )
        .add( age.eq( new Integer(0) ) )
        .add( age.eq( new Integer(1) ) )
        .add( age.eq( new Integer(2) ) )
    ) )
    .add( Property.forName("name").in( new String[] { "Fritz", "Izi", "Pk" } ) )
    .list();

List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.like("name", "F%")
    .addOrder( Order.asc("name") )
    .addOrder( Order.desc("age") )
    .setMaxResults(50)
    .list();
List cats = sess.createCriteria(Cat.class)
    .add( Property.forName("name").like("F%") )
    .addOrder( Property.forName("name").asc() )
    .addOrder( Property.forName("age").desc() )
    .setMaxResults(50)
    .list();

通过使用 createCriteria() 对关联进行导航，你可以指定相关实体的约束。
List cats = sess.createCriteria(Cat.class)
 .add( Restrictions.like("name", "F%") )
    .createCriteria("kittens")
        .add( Restrictions.like("name", "F%") )
    .list();
注意第二个 createCriteria() 返回一个新的 Criteria 实例，该实例引用 kittens 集合中的元素。

2010.08.29
-----------

1. 批量处理 Batch processing

设置合理参数
hibernate.jdbc.batch_size 20

--insert
Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

for ( int i=0; i<100000; i++ ) {
    Customer customer = new Customer(.....);
    session.save(customer);
    if ( i % 20 == 0 ) { //20, same as the JDBC batch size
     //flush a batch of inserts and release memory:
        session.flush();
        session.clear();
    }
}

tx.commit();
session.close();

--批量更新（Batch updates）
--此方法同样适用于检索和更新数据。此外，在进行会返回很多行数据的查询时，你需要使用
--scroll() 方法以便充分利用服务器端游标所带来的好处。
Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

ScrollableResults customers = session.getNamedQuery("GetCustomers")
    .setCacheMode(CacheMode.IGNORE)
    .scroll(ScrollMode.FORWARD_ONLY);
int count=0;
while ( customers.next() ) {
    Customer customer = (Customer) customers.get(0);
    customer.updateStuff(...);
    if ( ++count % 20 == 0 ) {
        //flush a batch of updates and release memory:
        session.flush();
        session.clear();
    }
}

tx.commit();
session.close();

2. HQL: hibernate 查询
   p221

   通过将接口 Query 与一个过滤器（filter）一起使用，集合（Collections）是可以分页的：
Query q = s.createFilter( collection, "" ); // the trivial filter
q.setMaxResults(PAGE_SIZE);
q.setFirstResult(PAGE_SIZE * pageNumber);
List page = q.list();

3. 条件查询（Criteria Queries）
List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.in( "name", new String[] { "Fritz", "Izi", "Pk" } ) )
    .add( Restrictions.disjunction()
        .add( Restrictions.isNull("age") )
        .add( Restrictions.eq("age", new Integer(0) ) )
        .add( Restrictions.eq("age", new Integer(1) ) )
        .add( Restrictions.eq("age", new Integer(2) ) )
    ) )
    .list();

   -- 有关查询，以后可以看看
   -- p228

2010.08.28
-----------

1. 生产环境下连接池
   c3p0, proxool

2. hibernate.connection.charSet

3. 外连接抓取 outer join fetch

4. 查询语言中的替换
你可以使用 hibernate.query.substitutions 在 Hibernate 中定义新的查询符号。例如：
hibernate.query.substitutions true=1, false=0
将导致符号 true 和 false 在生成的 SQL 中被翻译成整数常量。
hibernate.query.substitutions toLowercase=LOWER
将允许你重命名 SQL 中的 LOWER 函数。

p63

5. 再次解释构造函数

所有的持久化类都必须有一个默认的构造方法（可以不是 public
的），这样的话 Hibernate 就可以使用 Constructor.newInstance(）来实例化它们。 我们强烈建
议，在 Hibernate 中，为了运行期代理的生成，构造方法至少是包（package）内可见的

6. 多次映射同一个类
对特定的持久化类，映射多次是允许的。这种情形下，你必须指定 entity name 来区别不同映射
实体的对象实例。（默认情况下，实体名字和类名是相同的。）
--在以往项目中，查询中一般就用持久化类名，以后到要考虑用实体名字

7. 使用原生 SQL 的查询
你可以使用 createSQLQuery() 方法，用 SQL 来描述查询，并由 Hibernate 将结果集转换成对象。
请注意，你可以在任何时候调用 session.connection() 来获得并使用 JDBC Connection 对象。 如
果你选择使用 Hibernate 的 API，你必须把 SQL 别名用大括号包围起来：
List cats = session.createSQLQuery("SELECT {cat.*} FROM CAT {cat} WHERE ROWNUM<10")
    .addEntity("cat", Cat.class)
.list();
List cats = session.createSQLQuery(
    "SELECT {cat}.ID AS {cat.id}, {cat}.SEX AS {cat.sex}, " +
           "{cat}.MATE AS {cat.mate}, {cat}.SUBCLASS AS {cat.class}, ... " +
    "FROM CAT {cat} WHERE ROWNUM<10")
    .addEntity("cat", Cat.class)
.list()

8. 事务和并发
p183

2010.08.27
-----------

   a. 有关实体类构造函数的说明

P16
所有的持久化类（persistent classes）都要求有无参的构造器，因为 Hibernate 必须使用 Java
反射机制来为你创建对象。构造器（constructor）的访问级别可以是 private，然而当生成运行
时代理（runtime proxy）的时候则要求使用至少是 package 级别的访问控制，这样在没有字节
码指令（bytecode instrumentation）的情况下，从持久化类里获取数据会更有效率。

   b. mvn 运行单个程序

   要运行它，我们将使用 Maven exec 插件以及必要的 classpath 设置来进行调用：
   mvn exec:java -Dexec.mainClass="org.hibernate.tutorial.EventManager" -Dexec.args="store"

   c. 表关系 需要处理的设计问题是
   关联方向（directionality），阶数（multiplicity）和集合（collection）的行为

   p28


  --END
