2010.07.16
----------

1. Hibernate三大类查询总结

第一：关于Criteria的查询

   具有一个直观的、可扩展的条件查询API是Hibernate的特色。

15.1. 创建一个Criteria 实例
org.hibernate.Criteria接口表示特定持久类的一个查询。 Session是 Criteria实例的工厂。
Criteria crit = sess.createCriteria(Cat.class);
crit.setMaxResults(50);
List cats = crit.list();

15.2. 限制结果集内容
一个单独的查询条件是 org.hibernate.criterion.Criterion 接口的一个实例。
org.hibernate.criterion.Restrictions类 定义了获得某些内置Criterion类型的工厂方法。
List cats = sess.createCriteria(Cat.class)
     .add( Restrictions.like("name", "Fritz%") )
     .add( Restrictions.between("weight", minWeight, maxWeight) )
     .list();

约束可以按逻辑分组。
List cats = sess.createCriteria(Cat.class)
     .add( Restrictions.like("name", "Fritz%") )
     .add( Restrictions.or(
         Restrictions.eq( "age", new Integer(0) ),
         Restrictions.isNull("age")
     ) )
     .list();
List cats = sess.createCriteria(Cat.class)
     .add( Restrictions.in( "name", new String[] { "Fritz", "Izi", "Pk" } ) )
     .add( Restrictions.disjunction()
         .add( Restrictions.isNull("age") )
      .add( Restrictions.eq("age", new Integer(0) ) )
      .add( Restrictions.eq("age", new Integer(1) ) )
      .add( Restrictions.eq("age", new Integer(2) ) )
     ) )
     .list();

Hibernate提供了相当多的内置criterion类型 (Restrictions 子类), 但是尤其有用的是可以允许你直接使用SQL。
List cats = sess.createCriteria(Cat.class)
     .add( Restrictions.sql("lower({alias}.name) like lower(?)", "Fritz%", Hibernate.STRING) )
     .list();

{alias}占位符应当被替换为被查询实体的列别名。

Property 实例是获得一个条件的另外一种途径。你可以通过调用Property.forName() 创建一个Property。
Property age = Property.forName("age");
List cats = sess.createCriteria(Cat.class)
     .add( Restrictions.disjunction()
         .add( age.isNull() )
      .add( age.eq( new Integer(0) ) )
      .add( age.eq( new Integer(1) ) )
      .add( age.eq( new Integer(2) ) )
     ) )
     .add( Property.forName("name").in( new String[] { "Fritz", "Izi", "Pk" } ) )
     .list();


15.3. 结果集排序
你可以使用 org.hibernate.criterion.Order来为查询结果排序。
List cats = sess.createCriteria(Cat.class)
     .add( Restrictions.like("name", "F%")
     .addOrder( Order.asc("name") )
     .addOrder( Order.desc("age") )
     .setMaxResults(50)
     .list();
List cats = sess.createCriteria(Cat.class)
     .add( Property.forName("name").like("F%") )
     .addOrder( Property.forName("name").asc() )
     .addOrder( Property.forName("age").desc() )
     .setMaxResults(50)
     .list();

15.4. 关联
你可以使用createCriteria()非常容易的在互相关联的实体间建立 约束。
List cats = sess.createCriteria(Cat.class)
     .add( Restrictions.like("name", "F%")
     .createCriteria("kittens")
         .add( Restrictions.like("name", "F%")
     .list();

注意第二个 createCriteria()返回一个新的 Criteria实例，该实例引用kittens 集合中的元素。

接下来，替换形态在某些情况下也是很有用的。
List cats = sess.createCriteria(Cat.class)
     .createAlias("kittens", "kt")
     .createAlias("mate", "mt")
     .add( Restrictions.eqProperty("kt.name", "mt.name") )
     .list();

(createAlias()并不创建一个新的 Criteria实例。)

Cat 实例所保存的之前两次查询所返回的kittens集合是 没有被条件预过滤的。如果你希望只获得符合条件的kittens， 你必须使用returnMaps()。
List cats = sess.createCriteria(Cat.class)
     .createCriteria("kittens", "kt")
         .add( Restrictions.eq("name", "F%") )
     .returnMaps()
     .list();
Iterator iter = cats.iterator();
while ( iter.hasNext() ) {
     Map map = (Map) iter.next();
     Cat cat = (Cat) map.get(Criteria.ROOT_ALIAS);
     Cat kitten = (Cat) map.get("kt");
}

15.5. 动态关联抓取
你可以使用setFetchMode()在运行时定义动态关联抓取的语义。
List cats = sess.createCriteria(Cat.class)
     .add( Restrictions.like("name", "Fritz%") )
     .setFetchMode("mate", FetchMode.EAGER)
     .setFetchMode("kittens", FetchMode.EAGER)
     .list();

这个查询可以通过外连接抓取mate和kittens。 查看第 19.1 节 “ 抓取策略(Fetching strategies) ”可以获得更多信息。

15.6. 查询示例
org.hibernate.criterion.Example 类允许你通过一个给定实例 构建一个条件查询。
Cat cat = new Cat();
cat.setSex('F');
cat.setColor(Color.BLACK);
List results = session.createCriteria(Cat.class)
     .add( Example.create(cat) )
     .list();


版本属性、标识符和关联被忽略。默认情况下值为null的属性将被排除。

你可以自行调整Example使之更实用。
Example example = Example.create(cat)
     .excludeZeroes()            //exclude zero valued properties
     .excludeProperty("color")   //exclude the property named "color"
     .ignoreCase()               //perform case insensitive string comparisons
     .enableLike();              //use like for string comparisons
List results = session.createCriteria(Cat.class)
     .add(example)
     .list();


你甚至可以使用examples在关联对象上放置条件。
List results = session.createCriteria(Cat.class)
     .add( Example.create(cat) )
     .createCriteria("mate")
         .add( Example.create( cat.getMate() ) )
     .list();

15.7. 投影(Projections)、聚合（aggregation）和分组（grouping）
org.hibernate.criterion.Projections 是 Projection 的实例工厂。我们通过调用 setProjection()应用投影到一个查询。

在一个条件查询中没有必要显式的使用 "group by" 。某些投影类型就是被定义为 分组投影，他们也出现在SQL的group by子句中。

你可以选择把一个别名指派给一个投影，这样可以使投影值被约束或排序所引用。下面是两种不同的实现方式：
List results = session.createCriteria(Cat.class)
     .setProjection( Projections.alias( Projections.groupProperty("color"), "colr" ) )
     .addOrder( Order.asc("colr") )
     .list();
List results = session.createCriteria(Cat.class)
     .setProjection( Projections.groupProperty("color").as("colr") )
     .addOrder( Order.asc("colr") )
     .list();

alias()和as()方法简便的将一个投影实例包装到另外一个 别名的Projection实例中。
简而言之，当你添加一个投影到一个投影列表中时 你可以为它指定一个别名：
List results = session.createCriteria(Cat.class)
     .setProjection( Projections.projectionList()
         .add( Projections.rowCount(), "catCountByColor" )
         .add( Projections.avg("weight"), "avgWeight" )
         .add( Projections.max("weight"), "maxWeight" )
         .add( Projections.groupProperty("color"), "color" )
     )
     .addOrder( Order.desc("catCountByColor") )
     .addOrder( Order.desc("avgWeight") )
     .list();
List results = session.createCriteria(Domestic.class, "cat")
     .createAlias("kittens", "kit")
     .setProjection( Projections.projectionList()
         .add( Projections.property("cat.name"), "catName" )
         .add( Projections.property("kit.name"), "kitName" )
     )
     .addOrder( Order.asc("catName") )
     .addOrder( Order.asc("kitName") )
     .list();


你也可以使用Property.forName()来表示投影：
List results = session.createCriteria(Cat.class)
     .setProjection( Property.forName("name") )
     .add( Property.forName("color").eq(Color.BLACK) )
     .list();
List results = session.createCriteria(Cat.class)
     .setProjection( Projections.projectionList()
         .add( Projections.rowCount().as("catCountByColor") )
         .add( Property.forName("weight").avg().as("avgWeight") )
         .add( Property.forName("weight").max().as("maxWeight") )
         .add( Property.forName("color").group().as("color" )
     )
     .addOrder( Order.desc("catCountByColor") )
     .addOrder( Order.desc("avgWeight") )
     .list();


15.8. 离线(detached)查询和子查询
DetachedCriteria 类使你在一个session范围之外创建一个查询，并且可以使用任意的 Session来执行它。
DetachedCriteria query = DetachedCriteria.forClass(Cat.class)
     .add( Property.forName("sex").eq('F') );

Session session = ....;
Transaction txn = session.beginTransaction();
List results = query.getExecutableCriteria(session).setMaxResults(100).list();
txn.commit();
session.close();
DetachedCriteria也可以用以表示子查询。条件实例包含子查询可以通过 Subqueries或者Property获得。

DetachedCriteria avgWeight = DetachedCriteria.forClass(Cat.class)
.setProjection( Property.forName("weight").avg() );
session.createCriteria(Cat.class)
.add( Property.forName("weight).gt(avgWeight) )
.list();
DetachedCriteria weights = DetachedCriteria.forClass(Cat.class)
.setProjection( Property.forName("weight") );
session.createCriteria(Cat.class)
.add( Subqueries.geAll("weight", weights) )
.list();


甚至相互关联的子查询也是有可能的：
DetachedCriteria avgWeightForSex = DetachedCriteria.forClass(Cat.class, "cat2")
.setProjection( Property.forName("weight").avg() )
.add( Property.forName("cat2.sex").eqProperty("cat.sex") );
session.createCriteria(Cat.class, "cat")
.add( Property.forName("weight).gt(avgWeightForSex) )
.list();


第二：HQL查询

在HQL中关键字不区分大小写，但是属性和类名区分大小写,下面介绍各种类型的Hibernate的HQL查询。
1、Hibernate HQL查询:简单属性查询

* 单一属性查询，返回结果集属性列表，元素类型和实体类中相应的属性类型一致

* 多个属性查询,返回的集合元素是对象数组,数组元素的类型和对应的属性在实体类中的类型一致
数组的长度取决与select中属性的个数

* 如果认为返回数组不够对象化，可以采用HQL动态实例化Student对象

2、Hibernate HQL查询:实体对象查询

* N + 1问题，在默认情况下，使用query.iterate查询，有可以能出现N+1问题,所谓的N+1是在查询的时候发出了N+1条sql语句,1： 首先发出一条查询对象id列表的sql,N： 根据id列表到缓存中查询，如果缓存中不存在与之匹配的数据，那么会根据id发出相应的sql语句

* list和iterate的区别？

* list每次都会发出sql语句，list会向缓存中放入数据，而不利用缓存中的数据

* iterate：在默认情况下iterate利用缓存数据，但如果缓存中不存在数据有可以能出现N+1问题

3、Hibernate HQL查询:条件查询

* 可以采用拼字符串的方式传递参数

List students = session.createQuery("select s.id, s.name from Student s where s.name like '%1%'").list();

* 可以采用 ？来传递参数（索引从0开始）

List students = session.createQuery("select s.id, s.name from Student s where s.name like ?").setParameter(0, "%1%").list();      //可以使用？方式传递参数      //参数的索引从0开始      //传递的参数值，不用单引号引起来      //注意方法链编程

* 可以采用 ：参数名 来传递参数

List students = session.createQuery  ("select s.id, s.name from Student s where s.name like ：myname").setParameter("myname", "%1%").list();

* 如果传递多个参数，可以采用setParamterList方法

List students = session.createQuery("select s.id, s.name from Student s where s.id in(：myids)").setParameterList("myids", new Object[]{1, 2, 3, 4, 5}).list();

* 在HQL中可以使用数据库的函数，如：date_format

List students = session.createQuery("select s.id, s.name from Student s where date_format(s.createTime, '%Y-%m')=?").setParameter(0, "2008-02").list();      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH：mm：ss");                  //查询2008-01-10到2008-02-15创建的学生          List students = session.createQuery("select s.id, s.name from Student s where s.createTime between ? and ?")                .setParameter(0, sdf.parse("2008-01-10 00：00：00"))                .setParameter(1, sdf.parse("2008-02-15 23：59：59"))                      .list();

4、Hibernate HQL查询:直接使用sql进行查询

List students = session.createSQLQuery("select * from t_student").list();

不会返回对象，而是所有属性！

5、Hibernate HQL查询:分页查询

* setFirstResult()，从0开始

* setMaxResults,每页显示多少条数据

List students = session.createQuery("from Student")                .setFirstResult(1)                .setMaxResults(2)                .list();

6、Hibernate HQL查询:对象导航查询，在HQL中采用 . 进行导航

7、Hibernate HQL查询:连接查询

* 内连

Sql代码：
SELECT s.name, c.name FROM Student s （inner） join s.classes c

* 外连接（左连接/右连接）

SELECT s.name, c.name FROM Student s left join s.classes c

8、Hibernate HQL查询:统计查询

List students =session.createQuery("select c.name, count(s) from Student s join s.classes c " +"group by c.name order by c.name").list();      for (Iterator iter=students.iterator(); iter.hasNext();) {           Object[] obj = (Object[])iter.next();           System.out.println(obj[0] + ", " + obj[1]);      }

9、DML风格的操作（尽量少用，因为和缓存不同步）

session.createQuery  ("update Student s set s.name=? where s.id < ?")                           .setParameter(0, "李四")                           .setParameter(1, 5)                           .executeUpdate();

应当尽量少用，因为和缓存不同步，也就是说，假如在执行上面的语句之前，已经把student封装成一个list曾经拿了出来，再执行上面的语句对 student中的表进行数据更新，然后再list　Student表，则此时的list是从缓存中取的数据，而不是从表中找到的数据，也就是说，list拿到的是update前的数据，所以造成了这种不同步，所以这种风格尽量少用。

从这个方面也可以看得出Hibernate并不适用于聚集性，统计，大量批量的更新，删除等操作。


第三，本地SQL查询

使用SQLQuery
对原生SQL查询执行的控制是通过 SQLQuery接口进行的，通过执行Session.createSQLQuery()获取这个接口。最简单的情况下，我们可以采用以下形式：
List cats  =  sess.createSQLQuery( " select * from cats " ).addEntity(Cat. class ).list();

这个查询指定了:

SQL查询字符串

查询返回的实体

这里，结果集字段名被假设为与映射文件中指明的字段名相同。对于连接了多个表的查询，这就可能造成问题，因为可能在多个表中出现同样名字的字段。下面的方法就可以避免字段名重复的问题:
List cats  =  sess.createSQLQuery( " select {cat.*} from cats cat " ).addEntity( " cat " , Cat. class ).list();

这个查询指定了:

SQL查询语句，它带一个占位符，可以让Hibernate使用字段的别名.

查询返回的实体，和它的SQL表的别名.

addEntity()方法将SQL表的别名和实体类联系起来，并且确定查询结果集的形态。

addJoin()方法可以被用于载入其他的实体和集合的关联.
List cats  =  sess.createSQLQuery(
" select {cat.*}, {kitten.*} from cats cat, cats kitten where kitten.mother = cat.id " )
.addEntity( " cat " , Cat. class )
.addJoin( " kitten " ,  " cat.kittens " )
.list();


原生的SQL查询可能返回一个简单的标量值或者一个标量和实体的结合体。
Double max  =  (Double) sess.createSQLQuery( " select max(cat.weight) as maxWeight from cats cat " )
.addScalar( " maxWeight " , Hibernate.DOUBLE);
.uniqueResult();

除此之外，你还可以在你的hbm文件中描述结果集映射信息，在查询中使用。
List cats  =  sess.createSQLQuery(
" select {cat.*}, {kitten.*} from cats cat, cats kitten where kitten.mother = cat.id " )
.setResultSetMapping( " catAndKitten " )
.list();


命名SQL查询
可以在映射文档中定义查询的名字,然后就可以象调用一个命名的HQL查询一样直接调用命名SQL查询.在这种情况下,我们不 需要调用addEntity()方法.

< sql - query name = " persons " >
  < return  alias = " person "   class = " eg.Person " />
 Select person.NAME AS {person.name},person.AGE AS {person.age},person.SEX AS {person.sex} FROM PERSON person Where person.NAME LIKE :namePattern
</ sql - query >

Java代码

   1. <span style="font-size: medium;">List people  =  sess.getNamedQuery( " persons " ).setString( " namePattern " , namePattern)
   2. .setMaxResults( 50 )
   3. .list(); </span>

   ------------------------------------------------------------
1. Hibernate HQL语言
http://wangtong40.javaeye.com/blog/355624

HQL查询
   单表HQL查询

   FROM CUSTOMERS as customers

   Where子句

   FROM CUSTOMERS as customers WHERE customers.id=1
   FROM CUSTOMERS as customers WHERE customers.amount between 1 and 10
   FROM CUSTOMERS as customers WHERE customers.amount >100
   FROM CUSTOMERS as customers WHERE customers.email in ('foo@bar','bar@foo')
   FROM CUSTOMERS as customers WHERE customers.email IS NULL
   FROM CUSTOMERS as customers WHERE customers.email IS NOT NULL
   FROM CUSTOMERS as customers WHERE customers.email LIKE '@%'

HQL 操作符

(a)
HQL 常用操作符   描述
.                导航路径表达式操作符
+,-              一元正负号
*,/              乘除法
+,-              加减法
=,<>,<,>,>=,<=,[NOT]BETWEEN[NOT] LIKE,[NOT] IN,IS [NOT] NULL,IS [NOT] EMPTY
               二元比较操作符
NOT,AND,OR       逻辑操作符

(b) HQL常用函数

   FROM User u where lower(u.email) = 'foo@163.com' --小写
   FROM User u where lower(u.email) = 'foo@163.com' --大写
   FROM User u where concat(u.firstname,u.lastname) like 'G% K%' --拼接字符串
   FROM User u where size(u.bids) > 3 --集合大小

HQL 函数

HQL 常用操作符      描述
UPPER(s),LOWER(s)   大小写
CONCAT(s1,s2)       连接字符串
SUBSTRING(s,offset,length)
                  取子串
TRIM()              去空格
LENGTH(s)           长度
LOCATE(search,s,offset)
                  搜索位置
ABS(n),SQRT(n),MOD(dividend,divisor)
                    绝对值，开方，除法
SIZE                大小写
BIT_LENGTH(s)       位数
CUTTENT_DATE()      当前时间
CURRENT_TIME()
CURRENT_TIMESTAMP()
SECOND(d)
                    获取时间的不同部分
MINUTE(d)
HOUR(d)
DAY(d)
MONTH(d)
YEAR(d)
CAST(t as TYPE)     类型转换


HQL函数
Order表达式
   FROM CUSTOMERS as customers WHERE customers.id=1 ORDER BY customers.id
   FROM CUSTOMERS as customers ORDER BY customers.lastname asc,firstname asc

投影查询
   SELECT user.username,user.password FROM UserInfo user

注：1、在使用Select子句查询时，要给表对象起一个别名。
    2、查询出的结果集是一个Object[]数组。

----------

在where子句中允许使用的表达式包括 大多数你可以在SQL使用的表达式种类:

    数学运算符+, -, *, /

    二进制比较运算符=, >=, <=, <>, !=, like

    逻辑运算符and, or, not

    in, not in, between, is null, is not null, is empty, is not empty, member of and not member of

    "简单的" case, case ... when ... then ... else ... end,和 "搜索" case, case when ... then ... else ... end

    字符串连接符...||... or concat(...,...)

    current_date(), current_time(), current_timestamp()

    second(...), minute(...), hour(...), day(...), month(...), year(...),

    EJB-QL 3.0定义的任何函数或操作：substring(), trim(), lower(), upper(), length(), locate(), abs(), sqrt(), bit_length()

    coalesce() 和 nullif()

    cast(... as ...), 其第二个参数是某Hibernate类型的名字，以及extract(... from ...)，只要ANSI cast() 和 extract() 被底层数据库支持

    任何数据库支持的SQL标量函数，比如sign(), trunc(), rtrim(), sin()

    JDBC参数传入 ?

    命名参数:name, :start_date, :x1

    SQL 直接常量 'foo', 69, '1970-01-01 10:00:01.0'

    Java public static final 类型的常量 eg.Color.TABBY

关键字in与between可按如下方法使用:

from DomesticCat cat where cat.name between 'A' and 'B'

from DomesticCat cat where cat.name in ( 'Foo', 'Bar', 'Baz' )

而且否定的格式也可以如下书写：

from DomesticCat cat where cat.name not between 'A' and 'B'

from DomesticCat cat where cat.name not in ( 'Foo', 'Bar', 'Baz' )

同样, 子句is null与is not null可以被用来测试空值(null).